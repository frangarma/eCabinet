
eCabinet_V0_R0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000628  00800100  000012a4  00001338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800728  00800728  00001960  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000252c  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010b9  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136b  00000000  00000000  000052b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  00006624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9c  00000000  00000000  00006bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f5  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  0000874d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	17 e0       	ldi	r17, 0x07	; 7
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ea       	ldi	r30, 0xA4	; 164
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b7 e0       	ldi	r27, 0x07	; 7
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 36       	cpi	r26, 0x61	; 97
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b9 01 	call	0x372	; 0x372 <main>
      9e:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
 *  Author: Fran
 */ 
#include "includes.h"

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
      a6:	ea e7       	ldi	r30, 0x7A	; 122
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	87 60       	ori	r24, 0x07	; 7
      ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
      b0:	ac e7       	ldi	r26, 0x7C	; 124
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	8c 91       	ld	r24, X
      b6:	80 64       	ori	r24, 0x40	; 64
      b8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
      ba:	80 81       	ld	r24, Z
      bc:	80 68       	ori	r24, 0x80	; 128
      be:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
      c0:	80 81       	ld	r24, Z
      c2:	80 64       	ori	r24, 0x40	; 64
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <pin_manager>:
}

void pin_manager(void)
{	
	// Configure UART's pins
	DDRD |=(1<<PIND1);//Digital output TX USART
      c8:	51 9a       	sbi	0x0a, 1	; 10
	DDRD |=(0<<PIND2);//Digital input INT0
      ca:	8a b1       	in	r24, 0x0a	; 10
      cc:	8a b9       	out	0x0a, r24	; 10
	//DDRB |=(1<<PINB0);//Digital output IO8 turn on GLCD
	DDRB |=(1<<PINB1);//Digital output IO9 turn on Yelow LEd
      ce:	21 9a       	sbi	0x04, 1	; 4
	//CONFIGURATION SDA & SCL PIN of I2C protocol in PORT C
	//Note that is not necessary configure de DDRC´s pin corresponding 
	
	PORTC=0b00110000;// Pin 4 & 5 PULL UP TO I2C PROTOCOL
      d0:	80 e3       	ldi	r24, 0x30	; 48
      d2:	88 b9       	out	0x08, r24	; 8
      d4:	08 95       	ret

000000d6 <initial_configuration>:
#include "includes.h"


void initial_configuration (void)
{
	pin_manager();
      d6:	0e 94 64 00 	call	0xc8	; 0xc8 <pin_manager>
	USART_Init(BAUD_PRESCALE);	
      da:	87 e6       	ldi	r24, 0x67	; 103
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 09 05 	call	0xa12	; 0xa12 <USART_Init>
	i2c_init();	
      e2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <i2c_init>
	adc_init();
      e6:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	INT0_enable();
      ea:	0e 94 91 01 	call	0x322	; 0x322 <INT0_enable>
      ee:	08 95       	ret

000000f0 <eCabinetsendCommand_GPIOExpander>:
		array_aux[PSU_X-1][Out_Y_PSU_X-1]= ( Mat_ExpandBank [(PSU_X-1)*4+3][(Out_Y_PSU_X-1)] |= ~(Mat_ExpandBank [(PSU_X-1)*4+2][(Out_Y_PSU_X-1)])) ; 
	}	
	array_aux[1][0]&=array_aux[1][1];
	//void eCabinetsendCommand_GPIOExpander(uint8_t address, uint8_t register_definition, uint8_t IO)
	eCabinetsendCommand_GPIOExpander(Mat_ExpandBank [(PSU_X-1)*4][(Out_Y_PSU_X-1)], Mat_ExpandBank [(PSU_X-1)*4+1][(Out_Y_PSU_X-1)], array_aux[PSU_X-1][Out_Y_PSU_X-1]);
}
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	d6 2f       	mov	r29, r22
      f6:	c4 2f       	mov	r28, r20
      f8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
      fc:	8d 2f       	mov	r24, r29
      fe:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
     102:	8c 2f       	mov	r24, r28
     104:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
     108:	0e 94 ba 03 	call	0x774	; 0x774 <i2c_stop>
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <IOBank_Expander_Configuration>:

/***** This function aims is to configure all the IO of the three GPIO Expander and Banks from 0 to 4 according to hardware desing *****/
IOBank_Expander_Configuration()
{
eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, IORegisterBank0Address, IOConf_Bank0_Exp1);//Configure IO pins of Bank0 GPIOExpander_1
     112:	40 e0       	ldi	r20, 0x00	; 0
     114:	68 e1       	ldi	r22, 0x18	; 24
     116:	84 e4       	ldi	r24, 0x44	; 68
     118:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, IORegisterBank1Address, IOConf_Bank1_Exp1);//Configure IO pins of Bank1 GPIOExpander_1
     11c:	43 ef       	ldi	r20, 0xF3	; 243
     11e:	69 e1       	ldi	r22, 0x19	; 25
     120:	84 e4       	ldi	r24, 0x44	; 68
     122:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, IORegisterBank2Address, IOConf_Bank2_Exp1);//Configure IO pins of Bank2 GPIOExpander_1
     126:	46 e0       	ldi	r20, 0x06	; 6
     128:	6a e1       	ldi	r22, 0x1A	; 26
     12a:	84 e4       	ldi	r24, 0x44	; 68
     12c:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, IORegisterBank0Address, IOConf_Bank0_Exp2);//Configure IO pins of Bank0 GPIOExpander_2
     130:	48 ea       	ldi	r20, 0xA8	; 168
     132:	68 e1       	ldi	r22, 0x18	; 24
     134:	86 e4       	ldi	r24, 0x46	; 70
     136:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, IORegisterBank1Address, IOConf_Bank1_Exp2);//Configure IO pins of Bank1 GPIOExpander_2
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	69 e1       	ldi	r22, 0x19	; 25
     13e:	86 e4       	ldi	r24, 0x46	; 70
     140:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, IORegisterBank2Address, IOConf_Bank2_Exp2);//Configure IO pins of Bank0 GPIOExpander_2
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	6a e1       	ldi	r22, 0x1A	; 26
     148:	86 e4       	ldi	r24, 0x46	; 70
     14a:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank0Address, IOConf_Bank0_Exp3);//Configure IO pins of Bank0 GPIOExpander_3
     14e:	45 e5       	ldi	r20, 0x55	; 85
     150:	68 e1       	ldi	r22, 0x18	; 24
     152:	8c e4       	ldi	r24, 0x4C	; 76
     154:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank1Address, IOConf_Bank1_Exp3);//Configure IO pins of Bank1 GPIOExpander_3
     158:	41 e0       	ldi	r20, 0x01	; 1
     15a:	69 e1       	ldi	r22, 0x19	; 25
     15c:	8c e4       	ldi	r24, 0x4C	; 76
     15e:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank2Address, IOConf_Bank2_Exp3);//Configure IO pins of Bank0 GPIOExpander_3
     162:	48 ea       	ldi	r20, 0xA8	; 168
     164:	6a e1       	ldi	r22, 0x1A	; 26
     166:	8c e4       	ldi	r24, 0x4C	; 76
     168:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank3Address, IOConf_Bank3_Exp3);//Configure IO pins of Bank0 GPIOExpander_3
     16c:	4a e4       	ldi	r20, 0x4A	; 74
     16e:	6b e1       	ldi	r22, 0x1B	; 27
     170:	8c e4       	ldi	r24, 0x4C	; 76
     172:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank4Address, IOConf_Bank4_Exp3);//Configure IO pins of Bank0 GPIOExpander_3
     176:	4d e6       	ldi	r20, 0x6D	; 109
     178:	6c e1       	ldi	r22, 0x1C	; 28
     17a:	8c e4       	ldi	r24, 0x4C	; 76
     17c:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
}
     180:	08 95       	ret

00000182 <WDT_signal>:

void WDT_signal(void)
{
eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank2, WDT_IN_CONF| WDT_IN);
     182:	41 e1       	ldi	r20, 0x11	; 17
     184:	6a e0       	ldi	r22, 0x0A	; 10
     186:	84 e4       	ldi	r24, 0x44	; 68
     188:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank2, WDT_IN_CONF);	
     18c:	40 e1       	ldi	r20, 0x10	; 16
     18e:	6a e0       	ldi	r22, 0x0A	; 10
     190:	84 e4       	ldi	r24, 0x44	; 68
     192:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
     196:	08 95       	ret

00000198 <led_activity>:
}

void led_activity(void)
{
	eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank0, DataBank0GPIOExpander_1 &= LED0);//Configure IO pins of Bank2 GPIOExpander_1
     198:	40 91 2f 07 	lds	r20, 0x072F	; 0x80072f <DataBank0GPIOExpander_1>
     19c:	4f 7b       	andi	r20, 0xBF	; 191
     19e:	40 93 2f 07 	sts	0x072F, r20	; 0x80072f <DataBank0GPIOExpander_1>
     1a2:	68 e0       	ldi	r22, 0x08	; 8
     1a4:	84 e4       	ldi	r24, 0x44	; 68
     1a6:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1aa:	2f ef       	ldi	r18, 0xFF	; 255
     1ac:	81 ee       	ldi	r24, 0xE1	; 225
     1ae:	94 e0       	ldi	r25, 0x04	; 4
     1b0:	21 50       	subi	r18, 0x01	; 1
     1b2:	80 40       	sbci	r24, 0x00	; 0
     1b4:	90 40       	sbci	r25, 0x00	; 0
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <led_activity+0x18>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <led_activity+0x22>
     1ba:	00 00       	nop
	_delay_ms(100);
	eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank0, DataBank0GPIOExpander_1 |= ~LED0);//Configure IO pins of Bank2 GPIOExpander_1
     1bc:	40 91 2f 07 	lds	r20, 0x072F	; 0x80072f <DataBank0GPIOExpander_1>
     1c0:	40 64       	ori	r20, 0x40	; 64
     1c2:	40 93 2f 07 	sts	0x072F, r20	; 0x80072f <DataBank0GPIOExpander_1>
     1c6:	68 e0       	ldi	r22, 0x08	; 8
     1c8:	84 e4       	ldi	r24, 0x44	; 68
     1ca:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
     1ce:	08 95       	ret

000001d0 <IO_Bank_Expander_reset_outputs>:
}

/***** This function aims to reset every ouputs Baknk of every GPIO Expander in order to switch off all the hardware   *****/
void IO_Bank_Expander_reset_outputs(void)
{
     1d0:	cf 93       	push	r28
	

	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank2, DataBank2GPIOExpander_3 |= 0xFF );//Switch off both PSU1 outputs PSU1_1 & PSU1_2
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	c0 93 2a 07 	sts	0x072A, r28	; 0x80072a <DataBank2GPIOExpander_3>
     1d8:	4f ef       	ldi	r20, 0xFF	; 255
     1da:	6a e0       	ldi	r22, 0x0A	; 10
     1dc:	8c e4       	ldi	r24, 0x4C	; 76
     1de:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank3, DataBank3GPIOExpander_3 |= 0xFF );//Switch off both PSU1 outputs PSU1_3 & PSU1_4 & PSU_1_5 & PSU1_5_SOFT & PSU_5_1
     1e2:	c0 93 29 07 	sts	0x0729, r28	; 0x800729 <DataBank3GPIOExpander_3>
     1e6:	4f ef       	ldi	r20, 0xFF	; 255
     1e8:	6b e0       	ldi	r22, 0x0B	; 11
     1ea:	8c e4       	ldi	r24, 0x4C	; 76
     1ec:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 |= 0xFF );//Switch off both PSU2 outputs PSU2_1 & PSU2_2
     1f0:	c0 93 2e 07 	sts	0x072E, r28	; 0x80072e <DataBank0GPIOExpander_2>
     1f4:	4f ef       	ldi	r20, 0xFF	; 255
     1f6:	68 e0       	ldi	r22, 0x08	; 8
     1f8:	86 e4       	ldi	r24, 0x46	; 70
     1fa:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank0, DataBank0GPIOExpander_3 |= 0xFF );//Switch off both PSU3 outputs PSU3_1 & PSU3_2 & PSU3_3 & PSU3_4
     1fe:	c0 93 2c 07 	sts	0x072C, r28	; 0x80072c <DataBank0GPIOExpander_3>
     202:	4f ef       	ldi	r20, 0xFF	; 255
     204:	68 e0       	ldi	r22, 0x08	; 8
     206:	8c e4       	ldi	r24, 0x4C	; 76
     208:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank1, DataBank1GPIOExpander_3 |= 0xFF );//Switch off both PSU3 outputs PSU3_5
     20c:	c0 93 2b 07 	sts	0x072B, r28	; 0x80072b <DataBank1GPIOExpander_3>
     210:	4f ef       	ldi	r20, 0xFF	; 255
     212:	69 e0       	ldi	r22, 0x09	; 9
     214:	8c e4       	ldi	r24, 0x4C	; 76
     216:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank1, DataBank1GPIOExpander_2 |= 0xFF );//Switch off both PSU4 outputs PSU4_2
     21a:	c0 93 2d 07 	sts	0x072D, r28	; 0x80072d <DataBank1GPIOExpander_2>
     21e:	4f ef       	ldi	r20, 0xFF	; 255
     220:	69 e0       	ldi	r22, 0x09	; 9
     222:	86 e4       	ldi	r24, 0x46	; 70
     224:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank4, DataBank4GPIOExpander_3 |= 0xFF );//Switch off both PSU5&PSU6&PSU7 outpus PSU5_2 & PSU_6_2 & PSU_7_2
     228:	c0 93 28 07 	sts	0x0728, r28	; 0x800728 <__data_end>
     22c:	4f ef       	ldi	r20, 0xFF	; 255
     22e:	6c e0       	ldi	r22, 0x0C	; 12
     230:	8c e4       	ldi	r24, 0x4C	; 76
     232:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

	eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank0, DataBank0GPIOExpander_1 |= 0xFF );//Switch off both Leds 1&2.
     236:	c0 93 2f 07 	sts	0x072F, r28	; 0x80072f <DataBank0GPIOExpander_1>
     23a:	4f ef       	ldi	r20, 0xFF	; 255
     23c:	68 e0       	ldi	r22, 0x08	; 8
     23e:	84 e4       	ldi	r24, 0x44	; 68
     240:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

}
     244:	cf 91       	pop	r28
     246:	08 95       	ret

00000248 <SwitchOnAllPSU>:
/***** This function aims to switch on all the PSU  *****/
void SwitchOnAllPSU(void)
{
	

	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank2, DataBank2GPIOExpander_3 &= (PSU_1_1SWITCH & PSU_1_2SWITCH));//Switch on both output PSU1_1 & PSU1_2
     248:	40 91 2a 07 	lds	r20, 0x072A	; 0x80072a <DataBank2GPIOExpander_3>
     24c:	4f 7a       	andi	r20, 0xAF	; 175
     24e:	40 93 2a 07 	sts	0x072A, r20	; 0x80072a <DataBank2GPIOExpander_3>
     252:	6a e0       	ldi	r22, 0x0A	; 10
     254:	8c e4       	ldi	r24, 0x4C	; 76
     256:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank3, DataBank3GPIOExpander_3 &= (PSU_1_3SWITCH & PSU_1_4SWITCH));//Switch on both output PSU1_3 & PSU1_4
     25a:	40 91 29 07 	lds	r20, 0x0729	; 0x800729 <DataBank3GPIOExpander_3>
     25e:	4a 7f       	andi	r20, 0xFA	; 250
     260:	40 93 29 07 	sts	0x0729, r20	; 0x800729 <DataBank3GPIOExpander_3>
     264:	6b e0       	ldi	r22, 0x0B	; 11
     266:	8c e4       	ldi	r24, 0x4C	; 76
     268:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank3, DataBank3GPIOExpander_3 &= (PSU_1_5SWITCH));//Switch on both output PSU1_5
     26c:	40 91 29 07 	lds	r20, 0x0729	; 0x800729 <DataBank3GPIOExpander_3>
     270:	4f 7e       	andi	r20, 0xEF	; 239
     272:	40 93 29 07 	sts	0x0729, r20	; 0x800729 <DataBank3GPIOExpander_3>
     276:	6b e0       	ldi	r22, 0x0B	; 11
     278:	8c e4       	ldi	r24, 0x4C	; 76
     27a:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank3, DataBank3GPIOExpander_3 &= (PSU_1_5SOFT_SWITCH));//Switch on both output PSU1_5_SOFT
     27e:	40 91 29 07 	lds	r20, 0x0729	; 0x800729 <DataBank3GPIOExpander_3>
     282:	4f 7d       	andi	r20, 0xDF	; 223
     284:	40 93 29 07 	sts	0x0729, r20	; 0x800729 <DataBank3GPIOExpander_3>
     288:	6b e0       	ldi	r22, 0x0B	; 11
     28a:	8c e4       	ldi	r24, 0x4C	; 76
     28c:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 &= (PSU_2_2SWITCH & PSU_2_1SWITCH));//Switch on both output PSU2_1 & PSU2_2
     290:	40 91 2e 07 	lds	r20, 0x072E	; 0x80072e <DataBank0GPIOExpander_2>
     294:	4f 7a       	andi	r20, 0xAF	; 175
     296:	40 93 2e 07 	sts	0x072E, r20	; 0x80072e <DataBank0GPIOExpander_2>
     29a:	68 e0       	ldi	r22, 0x08	; 8
     29c:	86 e4       	ldi	r24, 0x46	; 70
     29e:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank0, DataBank0GPIOExpander_3 &= (PSU_3_1SWITCH & PSU_3_2SWITCH & PSU_3_3SWITCH & PSU_3_4SWITCH));//Switch on both output PSU3_1 & PSU3_3 & PSU3_2 & PSU3_4
     2a2:	40 91 2c 07 	lds	r20, 0x072C	; 0x80072c <DataBank0GPIOExpander_3>
     2a6:	45 75       	andi	r20, 0x55	; 85
     2a8:	40 93 2c 07 	sts	0x072C, r20	; 0x80072c <DataBank0GPIOExpander_3>
     2ac:	68 e0       	ldi	r22, 0x08	; 8
     2ae:	8c e4       	ldi	r24, 0x4C	; 76
     2b0:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank1, DataBank1GPIOExpander_3 &= (PSU_3_5SWITCH));//Switch on both output PSU3_5
     2b4:	40 91 2b 07 	lds	r20, 0x072B	; 0x80072b <DataBank1GPIOExpander_3>
     2b8:	4d 7f       	andi	r20, 0xFD	; 253
     2ba:	40 93 2b 07 	sts	0x072B, r20	; 0x80072b <DataBank1GPIOExpander_3>
     2be:	69 e0       	ldi	r22, 0x09	; 9
     2c0:	8c e4       	ldi	r24, 0x4C	; 76
     2c2:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank1, DataBank1GPIOExpander_2 &= (PSU_4_2SWITCH));//Switch on both output PSU4_2
     2c6:	40 91 2d 07 	lds	r20, 0x072D	; 0x80072d <DataBank1GPIOExpander_2>
     2ca:	4b 7f       	andi	r20, 0xFB	; 251
     2cc:	40 93 2d 07 	sts	0x072D, r20	; 0x80072d <DataBank1GPIOExpander_2>
     2d0:	69 e0       	ldi	r22, 0x09	; 9
     2d2:	86 e4       	ldi	r24, 0x46	; 70
     2d4:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank3, DataBank3GPIOExpander_3 &= (PSU_5_1SWITCH));//Switch on both output PSU5_1
     2d8:	40 91 29 07 	lds	r20, 0x0729	; 0x800729 <DataBank3GPIOExpander_3>
     2dc:	4f 77       	andi	r20, 0x7F	; 127
     2de:	40 93 29 07 	sts	0x0729, r20	; 0x800729 <DataBank3GPIOExpander_3>
     2e2:	6b e0       	ldi	r22, 0x0B	; 11
     2e4:	8c e4       	ldi	r24, 0x4C	; 76
     2e6:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank4, DataBank4GPIOExpander_3 &= (PSU_5_2SWITCH));//Switch on both output PSU5_2
     2ea:	40 91 28 07 	lds	r20, 0x0728	; 0x800728 <__data_end>
     2ee:	4d 7f       	andi	r20, 0xFD	; 253
     2f0:	40 93 28 07 	sts	0x0728, r20	; 0x800728 <__data_end>
     2f4:	6c e0       	ldi	r22, 0x0C	; 12
     2f6:	8c e4       	ldi	r24, 0x4C	; 76
     2f8:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank4, DataBank4GPIOExpander_3 &= (PSU_6_2SWITCH));//Switch on both output PSU6_2
     2fc:	40 91 28 07 	lds	r20, 0x0728	; 0x800728 <__data_end>
     300:	4f 7e       	andi	r20, 0xEF	; 239
     302:	40 93 28 07 	sts	0x0728, r20	; 0x800728 <__data_end>
     306:	6c e0       	ldi	r22, 0x0C	; 12
     308:	8c e4       	ldi	r24, 0x4C	; 76
     30a:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, OutputPortRegisterBank4, DataBank4GPIOExpander_3 &= (PSU_7_2SWITCH));//Switch on both output PSU7_2
     30e:	40 91 28 07 	lds	r20, 0x0728	; 0x800728 <__data_end>
     312:	4f 77       	andi	r20, 0x7F	; 127
     314:	40 93 28 07 	sts	0x0728, r20	; 0x800728 <__data_end>
     318:	6c e0       	ldi	r22, 0x0C	; 12
     31a:	8c e4       	ldi	r24, 0x4C	; 76
     31c:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
     320:	08 95       	ret

00000322 <INT0_enable>:
 */ 
#include "includes.h"

void INT0_enable (void)
{
	EICRA |=(1<<ISC01);
     322:	e9 e6       	ldi	r30, 0x69	; 105
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	82 60       	ori	r24, 0x02	; 2
     32a:	80 83       	st	Z, r24
	EICRA |=(0<<ISC00);//The falling edge of INT0 generates an interrupt request.
     32c:	80 81       	ld	r24, Z
     32e:	80 83       	st	Z, r24
	EIMSK |=(1<<INT0);	
     330:	e8 9a       	sbi	0x1d, 0	; 29
     332:	08 95       	ret

00000334 <__vector_1>:


//itoa(adc_value, buffer, 10);        //Convert the read value to an ascii string

ISR(INT0_vect)
{
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
	EIFR |= (1<< INTF0);//Flag interrupt reset
     33e:	e0 9a       	sbi	0x1c, 0	; 28
	//Here the code	
}
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_11>:
	
}*/

/***** TIMER1 COMPA *******/
ISR(TIMER1_COMPA_vect)
{
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	8f 93       	push	r24
	new_event_timer=1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <new_event_timer>
	count_timer++;			
     35c:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <count_timer>
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <count_timer>
}
     366:	8f 91       	pop	r24
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <main>:
int main(void)
{
	enum bool {false, true};
	enum bool myFlag=false;
	
	initial_configuration();//Pin manager; USART_init; I2C_init
     372:	0e 94 6b 00 	call	0xd6	; 0xd6 <initial_configuration>
	lcd_init();// Set of configuration commands
     376:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <lcd_init>
	test_1();// Display picture during 0.5 seconds
     37a:	0e 94 2c 05 	call	0xa58	; 0xa58 <test_1>
	test_2();// Send through USART "Hello my friend"
     37e:	0e 94 44 05 	call	0xa88	; 0xa88 <test_2>
	
	sei();//Set enable interrupt	
     382:	78 94       	sei
	TIMER1_enable();
     384:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <TIMER1_enable>
     388:	8f e9       	ldi	r24, 0x9F	; 159
     38a:	9f e0       	ldi	r25, 0x0F	; 15
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <main+0x1a>
     390:	00 c0       	rjmp	.+0      	; 0x392 <main+0x20>
     392:	00 00       	nop
	_delay_ms(1);
	/******* GPIO Expanders configuration******/
	IOBank_Expander_Configuration();
     394:	0e 94 89 00 	call	0x112	; 0x112 <IOBank_Expander_Configuration>
	/* Switch on PSU
	/* Parameter reads
	
	
	/****** RESET outputs or defaults values *****/
	IO_Bank_Expander_reset_outputs();
     398:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <IO_Bank_Expander_reset_outputs>
     39c:	9f ef       	ldi	r25, 0xFF	; 255
     39e:	e9 e6       	ldi	r30, 0x69	; 105
     3a0:	f8 e1       	ldi	r31, 0x18	; 24
     3a2:	91 50       	subi	r25, 0x01	; 1
     3a4:	e0 40       	sbci	r30, 0x00	; 0
     3a6:	f0 40       	sbci	r31, 0x00	; 0
     3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x30>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x3a>
     3ac:	00 00       	nop
	_delay_ms(500);
		//TODO Put here the same series for the rest of combination and merge all inside a function
	
	/*****Configure output registers to turn on all PSU*****/
	
	SwitchOnAllPSU();
     3ae:	0e 94 24 01 	call	0x248	; 0x248 <SwitchOnAllPSU>
	
	
	
	
	/***** Create here the configuration to put on MUX1 the signal to read from ADC*****/
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 &=PSU2_VOLTAGE);//This command charge the corresponding value to select PSU2_VOLTAGE signal into channel 0 of ADC IC. 
     3b2:	40 91 2e 07 	lds	r20, 0x072E	; 0x80072e <DataBank0GPIOExpander_2>
     3b6:	49 7f       	andi	r20, 0xF9	; 249
     3b8:	40 93 2e 07 	sts	0x072E, r20	; 0x80072e <DataBank0GPIOExpander_2>
     3bc:	68 e0       	ldi	r22, 0x08	; 8
     3be:	86 e4       	ldi	r24, 0x46	; 70
     3c0:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 &= PSU2_CURRENT);//This command charge the corresponding value to select PSU2_CURRENT signal into channel 0 of ADC IC. 
     3c4:	40 91 2e 07 	lds	r20, 0x072E	; 0x80072e <DataBank0GPIOExpander_2>
     3c8:	48 7f       	andi	r20, 0xF8	; 248
     3ca:	40 93 2e 07 	sts	0x072E, r20	; 0x80072e <DataBank0GPIOExpander_2>
     3ce:	68 e0       	ldi	r22, 0x08	; 8
     3d0:	86 e4       	ldi	r24, 0x46	; 70
     3d2:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	
	
	//PSU_Switch(2,2,1);
	/******* Headlines *****/
	
	lcd_draw_string(10,1, "Running: ", buffer);//Charge buffer with string
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	45 ee       	ldi	r20, 0xE5	; 229
     3dc:	56 e0       	ldi	r21, 0x06	; 6
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	8a e0       	ldi	r24, 0x0A	; 10
     3e2:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
	sprintf(mensaje, "B0_Exp2:%x", DataBank0GPIOExpander_2);
     3e6:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <DataBank0GPIOExpander_2>
     3ea:	1f 92       	push	r1
     3ec:	8f 93       	push	r24
     3ee:	8f ee       	ldi	r24, 0xEF	; 239
     3f0:	96 e0       	ldi	r25, 0x06	; 6
     3f2:	9f 93       	push	r25
     3f4:	8f 93       	push	r24
     3f6:	85 e3       	ldi	r24, 0x35	; 53
     3f8:	97 e0       	ldi	r25, 0x07	; 7
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
	lcd_draw_string(10,2, mensaje, buffer);//Charge buffer with string	
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	31 e0       	ldi	r19, 0x01	; 1
     406:	45 e3       	ldi	r20, 0x35	; 53
     408:	57 e0       	ldi	r21, 0x07	; 7
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	8a e0       	ldi	r24, 0x0A	; 10
     40e:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
	lcd_draw_string(10,3, "Voltage:", buffer);//Charge buffer with string	
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	31 e0       	ldi	r19, 0x01	; 1
     416:	4a ef       	ldi	r20, 0xFA	; 250
     418:	56 e0       	ldi	r21, 0x06	; 6
     41a:	63 e0       	ldi	r22, 0x03	; 3
     41c:	8a e0       	ldi	r24, 0x0A	; 10
     41e:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
	lcd_draw_string(10,4, "Current:", buffer);//Charge buffer with string
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	31 e0       	ldi	r19, 0x01	; 1
     426:	43 e0       	ldi	r20, 0x03	; 3
     428:	57 e0       	ldi	r21, 0x07	; 7
     42a:	64 e0       	ldi	r22, 0x04	; 4
     42c:	8a e0       	ldi	r24, 0x0A	; 10
     42e:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
	lcd_draw_string(10,5, "Current:", buffer);//Charge buffer with string
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	31 e0       	ldi	r19, 0x01	; 1
     436:	43 e0       	ldi	r20, 0x03	; 3
     438:	57 e0       	ldi	r21, 0x07	; 7
     43a:	65 e0       	ldi	r22, 0x05	; 5
     43c:	8a e0       	ldi	r24, 0x0A	; 10
     43e:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
	lcd_draw_string(10,6, "Current:", buffer);//Charge buffer with string
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	31 e0       	ldi	r19, 0x01	; 1
     446:	43 e0       	ldi	r20, 0x03	; 3
     448:	57 e0       	ldi	r21, 0x07	; 7
     44a:	66 e0       	ldi	r22, 0x06	; 6
     44c:	8a e0       	ldi	r24, 0x0A	; 10
     44e:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
	lcd_draw_string(10,7, "Error:", buffer);//Charge buffer with string	
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	31 e0       	ldi	r19, 0x01	; 1
     456:	4c e0       	ldi	r20, 0x0C	; 12
     458:	57 e0       	ldi	r21, 0x07	; 7
     45a:	67 e0       	ldi	r22, 0x07	; 7
     45c:	8a e0       	ldi	r24, 0x0A	; 10
     45e:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
	drawBuffer(buffer);
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <drawBuffer>
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
	{		
		
		if (new_event_timer)//Currently wait 100 seconds until begin to resets each 2 seconds,but is a new data is write in output register it doesn' wait the 100 seconds only 2
		{
			new_event_timer=0;
			sprintf(mensaje, "%d",count_timer);
     476:	03 e1       	ldi	r16, 0x13	; 19
     478:	17 e0       	ldi	r17, 0x07	; 7
     47a:	c5 e3       	ldi	r28, 0x35	; 53
     47c:	d7 e0       	ldi	r29, 0x07	; 7
	drawBuffer(buffer);
	
    while(1)
	{		
		
		if (new_event_timer)//Currently wait 100 seconds until begin to resets each 2 seconds,but is a new data is write in output register it doesn' wait the 100 seconds only 2
     47e:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <new_event_timer>
     482:	88 23       	and	r24, r24
     484:	09 f4       	brne	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	1b c1       	rjmp	.+566    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
		{
			new_event_timer=0;
     488:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <new_event_timer>
			sprintf(mensaje, "%d",count_timer);
     48c:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <count_timer>
     490:	1f 92       	push	r1
     492:	8f 93       	push	r24
     494:	1f 93       	push	r17
     496:	0f 93       	push	r16
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
			lcd_draw_string(50,1, mensaje, buffer);//Charge buffer with string
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	31 e0       	ldi	r19, 0x01	; 1
     4a4:	ae 01       	movw	r20, r28
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	82 e3       	ldi	r24, 0x32	; 50
     4aa:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
			
			WDT_signal();			
     4ae:	0e 94 c1 00 	call	0x182	; 0x182 <WDT_signal>
			led_activity();
     4b2:	0e 94 cc 00 	call	0x198	; 0x198 <led_activity>
 			
			
				
			//eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, (DataBank0GPIOExpander_2 &= PSU2_VOLTAGE));//This command charge the corresponding value to select PSU2_VOLTAGE signal into channel 0 of ADC IC. 
			eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, 0xA9);//This command charge the corresponding value to select PSU2_VOLTAGE signal into channel 0 of ADC IC. 
     4b6:	49 ea       	ldi	r20, 0xA9	; 169
     4b8:	68 e0       	ldi	r22, 0x08	; 8
     4ba:	86 e4       	ldi	r24, 0x46	; 70
     4bc:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
			error=i2c_readReg(ADCAddress, 0x84, array_aux, 2);//
     4c0:	22 e0       	ldi	r18, 0x02	; 2
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	4b e4       	ldi	r20, 0x4B	; 75
     4c6:	57 e0       	ldi	r21, 0x07	; 7
     4c8:	64 e8       	ldi	r22, 0x84	; 132
     4ca:	8a e4       	ldi	r24, 0x4A	; 74
     4cc:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_readReg>
     4d0:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <error>
			aux=array_aux[0]<<8;
     4d4:	0f 2e       	mov	r0, r31
     4d6:	fb e4       	ldi	r31, 0x4B	; 75
     4d8:	ef 2e       	mov	r14, r31
     4da:	f7 e0       	ldi	r31, 0x07	; 7
     4dc:	ff 2e       	mov	r15, r31
     4de:	f0 2d       	mov	r31, r0
     4e0:	f7 01       	movw	r30, r14
     4e2:	60 81       	ld	r22, Z
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	76 2f       	mov	r23, r22
     4e8:	66 27       	eor	r22, r22
			aux|= array_aux[1];
     4ea:	81 81       	ldd	r24, Z+1	; 0x01
     4ec:	68 2b       	or	r22, r24
			aux/=38.5024;// Voltage 38.5024
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__floatunsisf>
     4f6:	25 e7       	ldi	r18, 0x75	; 117
     4f8:	32 e0       	ldi	r19, 0x02	; 2
     4fa:	4a e1       	ldi	r20, 0x1A	; 26
     4fc:	52 e4       	ldi	r21, 0x42	; 66
     4fe:	0e 94 49 05 	call	0xa92	; 0xa92 <__divsf3>
     502:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fixunssfsi>
     506:	60 93 30 07 	sts	0x0730, r22	; 0x800730 <aux>
     50a:	70 93 31 07 	sts	0x0731, r23	; 0x800731 <aux+0x1>
			sprintf(mensaje, "%d", aux);
     50e:	7f 93       	push	r23
     510:	6f 93       	push	r22
     512:	1f 93       	push	r17
     514:	0f 93       	push	r16
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
			lcd_draw_string(50,3, mensaje, buffer);//Charge buffer with string			 
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	31 e0       	ldi	r19, 0x01	; 1
     522:	ae 01       	movw	r20, r28
     524:	63 e0       	ldi	r22, 0x03	; 3
     526:	82 e3       	ldi	r24, 0x32	; 50
     528:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
			aux=0;
     52c:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <aux+0x1>
     530:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <aux>
			
			//eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, (DataBank0GPIOExpander_2 &= PSU2_CURRENT));//This command charge the corresponding value to select PSU2_CURRENT signal into channel 0 of ADC IC. 
			eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, 0xA8);//This command charge the corresponding value to select PSU2_CURRENT signal into channel 0 of ADC IC. 
     534:	48 ea       	ldi	r20, 0xA8	; 168
     536:	68 e0       	ldi	r22, 0x08	; 8
     538:	86 e4       	ldi	r24, 0x46	; 70
     53a:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
			error=i2c_readReg(ADCAddress, 0x84, array_aux, 2);
     53e:	22 e0       	ldi	r18, 0x02	; 2
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	a7 01       	movw	r20, r14
     544:	64 e8       	ldi	r22, 0x84	; 132
     546:	8a e4       	ldi	r24, 0x4A	; 74
     548:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_readReg>
     54c:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <error>
			aux=array_aux[0]<<8;
     550:	f7 01       	movw	r30, r14
     552:	80 81       	ld	r24, Z
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	98 2f       	mov	r25, r24
     558:	88 27       	eor	r24, r24
			aux|= array_aux[1];
     55a:	21 81       	ldd	r18, Z+1	; 0x01
     55c:	82 2b       	or	r24, r18
     55e:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <aux+0x1>
     562:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <aux>
			//aux/54;// Current=(Valor leído -2048)/54.0672
			sprintf(mensaje, "%d", aux);
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	1f 93       	push	r17
     56c:	0f 93       	push	r16
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
			lcd_draw_string(50,4, mensaje, buffer);//Charge buffer with string
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	31 e0       	ldi	r19, 0x01	; 1
     57a:	ae 01       	movw	r20, r28
     57c:	64 e0       	ldi	r22, 0x04	; 4
     57e:	82 e3       	ldi	r24, 0x32	; 50
     580:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
			aux=0;
     584:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <aux+0x1>
     588:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <aux>
			
			//eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, (DataBank0GPIOExpander_2 &= PSU2_CURRENT));//This command charge the corresponding value to select PSU2_CURRENT signal into channel 0 of ADC IC.
			eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, 0xAB);//This command charge the corresponding value to select PSU2_1_CURRENT signal into channel 0 of ADC IC.
     58c:	4b ea       	ldi	r20, 0xAB	; 171
     58e:	68 e0       	ldi	r22, 0x08	; 8
     590:	86 e4       	ldi	r24, 0x46	; 70
     592:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
			error=i2c_readReg(ADCAddress, 0x84, array_aux, 2);
     596:	22 e0       	ldi	r18, 0x02	; 2
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	a7 01       	movw	r20, r14
     59c:	64 e8       	ldi	r22, 0x84	; 132
     59e:	8a e4       	ldi	r24, 0x4A	; 74
     5a0:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_readReg>
     5a4:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <error>
			aux=array_aux[0]<<8;
     5a8:	f7 01       	movw	r30, r14
     5aa:	80 81       	ld	r24, Z
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	98 2f       	mov	r25, r24
     5b0:	88 27       	eor	r24, r24
			aux|= array_aux[1];
     5b2:	21 81       	ldd	r18, Z+1	; 0x01
     5b4:	82 2b       	or	r24, r18
     5b6:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <aux+0x1>
     5ba:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <aux>
			//aux/=(82);// Current=(Valor leído/820)*10
			sprintf(mensaje, "%d", aux);
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	1f 93       	push	r17
     5c4:	0f 93       	push	r16
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
			lcd_draw_string(50,5, mensaje, buffer);//Charge buffer with string
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	31 e0       	ldi	r19, 0x01	; 1
     5d2:	ae 01       	movw	r20, r28
     5d4:	65 e0       	ldi	r22, 0x05	; 5
     5d6:	82 e3       	ldi	r24, 0x32	; 50
     5d8:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
			aux=0;
     5dc:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <aux+0x1>
     5e0:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <aux>
			
			//eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, (DataBank0GPIOExpander_2 &= PSU2_CURRENT));//This command charge the corresponding value to select PSU2_CURRENT signal into channel 0 of ADC IC.
			eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, 0xAC);//This command charge the corresponding value to select PSU2_2_CURRENT signal into channel 0 of ADC IC.
     5e4:	4c ea       	ldi	r20, 0xAC	; 172
     5e6:	68 e0       	ldi	r22, 0x08	; 8
     5e8:	86 e4       	ldi	r24, 0x46	; 70
     5ea:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
			error=i2c_readReg(ADCAddress, 0x84, array_aux, 2);
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	a7 01       	movw	r20, r14
     5f4:	64 e8       	ldi	r22, 0x84	; 132
     5f6:	8a e4       	ldi	r24, 0x4A	; 74
     5f8:	0e 94 be 03 	call	0x77c	; 0x77c <i2c_readReg>
     5fc:	80 93 32 07 	sts	0x0732, r24	; 0x800732 <error>
			aux=array_aux[0]<<8;
     600:	f7 01       	movw	r30, r14
     602:	80 81       	ld	r24, Z
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	98 2f       	mov	r25, r24
     608:	88 27       	eor	r24, r24
			aux|= array_aux[1];
     60a:	21 81       	ldd	r18, Z+1	; 0x01
     60c:	82 2b       	or	r24, r18
     60e:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <aux+0x1>
     612:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <aux>
			//aux/=(82);// Current=(Valor leído/820)*10
			sprintf(mensaje, "%d", aux);
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	1f 93       	push	r17
     61c:	0f 93       	push	r16
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
			lcd_draw_string(50,6, mensaje, buffer);//Charge buffer with string
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	31 e0       	ldi	r19, 0x01	; 1
     62a:	ae 01       	movw	r20, r28
     62c:	66 e0       	ldi	r22, 0x06	; 6
     62e:	82 e3       	ldi	r24, 0x32	; 50
     630:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
			aux=0;
     634:	10 92 31 07 	sts	0x0731, r1	; 0x800731 <aux+0x1>
     638:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <aux>
			
		
			if (error)
     63c:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <error>
     640:	ed b7       	in	r30, 0x3d	; 61
     642:	fe b7       	in	r31, 0x3e	; 62
     644:	7e 96       	adiw	r30, 0x1e	; 30
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	fe bf       	out	0x3e, r31	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	ed bf       	out	0x3d, r30	; 61
     650:	88 23       	and	r24, r24
     652:	b1 f0       	breq	.+44     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
			{
				 sprintf(mensaje, "%d",error);
     654:	1f 92       	push	r1
     656:	8f 93       	push	r24
     658:	1f 93       	push	r17
     65a:	0f 93       	push	r16
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
				 lcd_draw_string(50,7, mensaje, buffer);//Charge buffer with string
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	31 e0       	ldi	r19, 0x01	; 1
     668:	ae 01       	movw	r20, r28
     66a:	67 e0       	ldi	r22, 0x07	; 7
     66c:	82 e3       	ldi	r24, 0x32	; 50
     66e:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	15 c0       	rjmp	.+42     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
			 }
			else
			{ 
				sprintf(mensaje, "%d",error);
     680:	1f 92       	push	r1
     682:	1f 92       	push	r1
     684:	1f 93       	push	r17
     686:	0f 93       	push	r16
     688:	df 93       	push	r29
     68a:	cf 93       	push	r28
     68c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <sprintf>
				lcd_draw_string(50,7, mensaje, buffer);
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	31 e0       	ldi	r19, 0x01	; 1
     694:	ae 01       	movw	r20, r28
     696:	67 e0       	ldi	r22, 0x07	; 7
     698:	82 e3       	ldi	r24, 0x32	; 50
     69a:	0e 94 28 04 	call	0x850	; 0x850 <lcd_draw_string>
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
			}
			
			drawBuffer(buffer);		
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <drawBuffer>
			
			if (count_timer==255)
     6b2:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <count_timer>
     6b6:	8f 3f       	cpi	r24, 0xFF	; 255
     6b8:	11 f4       	brne	.+4      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
			{ count_timer=0;}
     6ba:	10 92 33 07 	sts	0x0733, r1	; 0x800733 <count_timer>
				
			
		}// end if (new_event_timer)
		
		
		NOP();
     6be:	0e 94 2b 05 	call	0xa56	; 0xa56 <NOP>
			
    } // end while
     6c2:	dd ce       	rjmp	.-582    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

000006c4 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     6c4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6c8:	80 e3       	ldi	r24, 0x30	; 48
     6ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6d4:	08 95       	ret

000006d6 <i2c_start>:
     6d6:	94 ea       	ldi	r25, 0xA4	; 164
     6d8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6dc:	ec eb       	ldi	r30, 0xBC	; 188
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	90 81       	ld	r25, Z
     6e2:	99 23       	and	r25, r25
     6e4:	ec f7       	brge	.-6      	; 0x6e0 <i2c_start+0xa>
     6e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6ea:	98 7f       	andi	r25, 0xF8	; 248
     6ec:	98 30       	cpi	r25, 0x08	; 8
     6ee:	11 f0       	breq	.+4      	; 0x6f4 <i2c_start+0x1e>
     6f0:	90 31       	cpi	r25, 0x10	; 16
     6f2:	a1 f4       	brne	.+40     	; 0x71c <i2c_start+0x46>
     6f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6f8:	84 e8       	ldi	r24, 0x84	; 132
     6fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6fe:	ec eb       	ldi	r30, 0xBC	; 188
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	88 23       	and	r24, r24
     706:	ec f7       	brge	.-6      	; 0x702 <i2c_start+0x2c>
     708:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     70c:	98 7f       	andi	r25, 0xF8	; 248
     70e:	98 31       	cpi	r25, 0x18	; 24
     710:	39 f0       	breq	.+14     	; 0x720 <i2c_start+0x4a>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 34       	cpi	r25, 0x40	; 64
     716:	29 f4       	brne	.+10     	; 0x722 <i2c_start+0x4c>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	08 95       	ret
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	08 95       	ret
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	08 95       	ret

00000724 <i2c_write>:
unsigned char i2c_write( uint8_t data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     724:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     728:	84 e8       	ldi	r24, 0x84	; 132
     72a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     72e:	ec eb       	ldi	r30, 0xBC	; 188
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	88 23       	and	r24, r24
     736:	ec f7       	brge	.-6      	; 0x732 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     738:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     73c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	98 32       	cpi	r25, 0x28	; 40
     742:	09 f4       	brne	.+2      	; 0x746 <i2c_write+0x22>
     744:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     746:	08 95       	ret

00000748 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     748:	84 ec       	ldi	r24, 0xC4	; 196
     74a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
     74e:	ec eb       	ldi	r30, 0xBC	; 188
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	88 23       	and	r24, r24
     756:	ec f7       	brge	.-6      	; 0x752 <i2c_readAck+0xa>

    return TWDR;
     758:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
     75c:	08 95       	ret

0000075e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     75e:	84 e8       	ldi	r24, 0x84	; 132
     760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     764:	ec eb       	ldi	r30, 0xBC	; 188
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	88 23       	and	r24, r24
     76c:	ec f7       	brge	.-6      	; 0x768 <i2c_readNak+0xa>
	
    return TWDR;
     76e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     772:	08 95       	ret

00000774 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     774:	84 e9       	ldi	r24, 0x94	; 148
     776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     77a:	08 95       	ret

0000077c <i2c_readReg>:

}/* i2c_stop */


uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
     77c:	bf 92       	push	r11
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	c8 2f       	mov	r28, r24
     790:	d6 2f       	mov	r29, r22
     792:	7a 01       	movw	r14, r20
     794:	89 01       	movw	r16, r18
	if (i2c_start(devaddr<<1)) return 1;
     796:	88 0f       	add	r24, r24
     798:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
     79c:	81 11       	cpse	r24, r1
     79e:	22 c0       	rjmp	.+68     	; 0x7e4 <i2c_readReg+0x68>

 	i2c_write(regaddr);
     7a0:	8d 2f       	mov	r24, r29
     7a2:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	

	if (i2c_start( (devaddr<<1) |0x01)) return 1;
     7a6:	8c 2f       	mov	r24, r28
     7a8:	88 0f       	add	r24, r24
     7aa:	81 60       	ori	r24, 0x01	; 1
     7ac:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
     7b0:	b8 2e       	mov	r11, r24
     7b2:	81 11       	cpse	r24, r1
     7b4:	1a c0       	rjmp	.+52     	; 0x7ea <i2c_readReg+0x6e>

	for (uint16_t i = 0; i < (length-1); i++)
     7b6:	01 50       	subi	r16, 0x01	; 1
     7b8:	11 09       	sbc	r17, r1
     7ba:	51 f0       	breq	.+20     	; 0x7d0 <i2c_readReg+0x54>
     7bc:	e7 01       	movw	r28, r14
     7be:	67 01       	movw	r12, r14
     7c0:	c0 0e       	add	r12, r16
     7c2:	d1 1e       	adc	r13, r17
	{
		data[i] = i2c_readAck();
     7c4:	0e 94 a4 03 	call	0x748	; 0x748 <i2c_readAck>
     7c8:	89 93       	st	Y+, r24
 	i2c_write(regaddr);
	

	if (i2c_start( (devaddr<<1) |0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
     7ca:	cc 15       	cp	r28, r12
     7cc:	dd 05       	cpc	r29, r13
     7ce:	d1 f7       	brne	.-12     	; 0x7c4 <i2c_readReg+0x48>
	{
		data[i] = i2c_readAck();
	}
	data[(length-1)] = i2c_readNak();
     7d0:	e7 01       	movw	r28, r14
     7d2:	c0 0f       	add	r28, r16
     7d4:	d1 1f       	adc	r29, r17
     7d6:	0e 94 af 03 	call	0x75e	; 0x75e <i2c_readNak>
     7da:	88 83       	st	Y, r24
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7dc:	84 e9       	ldi	r24, 0x94	; 148
     7de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <i2c_readReg+0x72>
}/* i2c_stop */


uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr<<1)) return 1;
     7e4:	bb 24       	eor	r11, r11
     7e6:	b3 94       	inc	r11
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <i2c_readReg+0x72>

 	i2c_write(regaddr);
	

	if (i2c_start( (devaddr<<1) |0x01)) return 1;
     7ea:	bb 24       	eor	r11, r11
     7ec:	b3 94       	inc	r11
	data[(length-1)] = i2c_readNak();

	i2c_stop();

	return 0;
}
     7ee:	8b 2d       	mov	r24, r11
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	08 95       	ret

00000804 <clearBuffer>:
	//memset(buff, 0, 1024);
	for (uint16_t i= 0;i<1024;i++)
	{
		buffer[i]=0x00;
	}
}
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	34 e0       	ldi	r19, 0x04	; 4
     808:	fc 01       	movw	r30, r24
     80a:	a9 01       	movw	r20, r18
     80c:	11 92       	st	Z+, r1
     80e:	41 50       	subi	r20, 0x01	; 1
     810:	50 40       	sbci	r21, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <clearBuffer+0x8>
     814:	08 95       	ret

00000816 <lcd_draw_char>:
	
}


void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff)
{
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	fa 01       	movw	r30, r20
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	4e 0f       	add	r20, r30
     824:	5f 1f       	adc	r21, r31
     826:	fa 01       	movw	r30, r20
     828:	e0 5a       	subi	r30, 0xA0	; 160
     82a:	fb 4f       	sbci	r31, 0xFB	; 251
	uint8_t ascii_offset = 32;
	for(uint8_t i=0; i<5; i++)
	{
		buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	40 e8       	ldi	r20, 0x80	; 128
     830:	64 9f       	mul	r22, r20
     832:	80 0d       	add	r24, r0
     834:	91 1d       	adc	r25, r1
     836:	11 24       	eor	r1, r1
     838:	d9 01       	movw	r26, r18
     83a:	a8 0f       	add	r26, r24
     83c:	b9 1f       	adc	r27, r25
     83e:	05 96       	adiw	r24, 0x05	; 5
     840:	28 0f       	add	r18, r24
     842:	39 1f       	adc	r19, r25
     844:	81 91       	ld	r24, Z+
     846:	8d 93       	st	X+, r24


void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff)
{
	uint8_t ascii_offset = 32;
	for(uint8_t i=0; i<5; i++)
     848:	a2 17       	cp	r26, r18
     84a:	b3 07       	cpc	r27, r19
     84c:	d9 f7       	brne	.-10     	; 0x844 <lcd_draw_char+0x2e>
	{
		buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
	}
}
     84e:	08 95       	ret

00000850 <lcd_draw_string>:

void lcd_draw_string(uint8_t column, uint8_t page, char *string, uint8_t *buff)
{
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	fa 01       	movw	r30, r20
	uint8_t i = 0;
	while(string[i] != 0)
     860:	40 81       	ld	r20, Z
     862:	44 23       	and	r20, r20
     864:	91 f0       	breq	.+36     	; 0x88a <lcd_draw_string+0x3a>
     866:	79 01       	movw	r14, r18
     868:	8f 01       	movw	r16, r30
     86a:	d6 2e       	mov	r13, r22
     86c:	c8 2f       	mov	r28, r24
     86e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcd_draw_char(column+(5*i), page, (string[i]), buff);
     870:	97 01       	movw	r18, r14
     872:	6d 2d       	mov	r22, r13
     874:	8c 2f       	mov	r24, r28
     876:	0e 94 0b 04 	call	0x816	; 0x816 <lcd_draw_char>
		i++;
     87a:	df 5f       	subi	r29, 0xFF	; 255
}

void lcd_draw_string(uint8_t column, uint8_t page, char *string, uint8_t *buff)
{
	uint8_t i = 0;
	while(string[i] != 0)
     87c:	f8 01       	movw	r30, r16
     87e:	ed 0f       	add	r30, r29
     880:	f1 1d       	adc	r31, r1
     882:	40 81       	ld	r20, Z
     884:	cb 5f       	subi	r28, 0xFB	; 251
     886:	41 11       	cpse	r20, r1
     888:	f3 cf       	rjmp	.-26     	; 0x870 <lcd_draw_string+0x20>
	{
		lcd_draw_char(column+(5*i), page, (string[i]), buff);
		i++;
	}
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	08 95       	ret

0000089a <sendCommand>:
	buffer[pagina*128+x] = nt;
	sendData(buffer[pagina*128+x]);
}

void sendCommand(uint8_t command)
{
     89a:	cf 93       	push	r28
     89c:	c8 2f       	mov	r28, r24
	i2c_start(SSD1306_DEFAULT_ADDRESS);
     89e:	88 e7       	ldi	r24, 0x78	; 120
     8a0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
	i2c_write(command_byte);
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_write(command);
     8aa:	8c 2f       	mov	r24, r28
     8ac:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_stop();
     8b0:	0e 94 ba 03 	call	0x774	; 0x774 <i2c_stop>
}
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <lcd_init>:
//https://github.com/tibounise/SSD1306-AVR/blob/master/SSD1306.cpp

void lcd_init(void)// Init sequence for 128x64 OLED module
{
	// Turn display off
	sendCommand(SSD1306_DISPLAYOFF);//0XAE
     8b8:	8e ea       	ldi	r24, 0xAE	; 174
     8ba:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	
	
	sendCommand(SSD1306_SETMULTIPLEX);//0XA8
     8be:	88 ea       	ldi	r24, 0xA8	; 168
     8c0:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0X3F);
     8c4:	8f e3       	ldi	r24, 0x3F	; 63
     8c6:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	sendCommand(SSD1306_SETDISPLAYOFFSET);//0XD3
     8ca:	83 ed       	ldi	r24, 0xD3	; 211
     8cc:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0x00);					// no offset
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	//sendCommand_1((SSD1306_SETSTARTLINE | 0x00));//0X40, range from 0x40 to 7F
	sendCommand(SSD1306_SETSTARTLINE);	//0X40
     8d6:	80 e4       	ldi	r24, 0x40	; 64
     8d8:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	//sendCommand(0x00);					//LINE 0
	
	//sendCommand(SSD1306_SEGREMAP);	//0XA0, two options: 0XA0 | 0XA1
	sendCommand(0XA1);	//0XA1 ESTA ES UNA SEGUNDA OPCION PARA SEGREMAP
     8dc:	81 ea       	ldi	r24, 0xA1	; 161
     8de:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	sendCommand(SSD1306_COMSCANDEC);//0XC8, two options: 0XC0 | 0XC8, ALLOWING LAYOUT FLEXIBILITY IN THE OLED MODULE
     8e2:	88 ec       	ldi	r24, 0xC8	; 200
     8e4:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	//sendCommand(0XC0);
	
	sendCommand(SSD1306_SETCOMPINS);	//0XDA
     8e8:	8a ed       	ldi	r24, 0xDA	; 218
     8ea:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0x12);					//
     8ee:	82 e1       	ldi	r24, 0x12	; 18
     8f0:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	sendCommand(SSD1306_SETCONTRAST);//0X81
     8f4:	81 e8       	ldi	r24, 0x81	; 129
     8f6:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0xCF);
     8fa:	8f ec       	ldi	r24, 0xCF	; 207
     8fc:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	sendCommand(SSD1306_DISPLAYALLON_RESUME);	//0XA4
     900:	84 ea       	ldi	r24, 0xA4	; 164
     902:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	sendCommand(SSD1306_NORMALDISPLAY);	//0XA6 IF INVERTER CHARGE 0XA7
     906:	86 ea       	ldi	r24, 0xA6	; 166
     908:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	//sendCommand(0XA7);
	
	sendCommand(SSD1306_SETDISPLAYCLOCKDIV);//0XD5
     90c:	85 ed       	ldi	r24, 0xD5	; 213
     90e:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0x80);						// the suggested ratio 0x80
     912:	80 e8       	ldi	r24, 0x80	; 128
     914:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>

	sendCommand(SSD1306_CHARGEPUMP);	//0X8D	Charge pump Setting
     918:	8d e8       	ldi	r24, 0x8D	; 141
     91a:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0x14);					// Enable charge pump
     91e:	84 e1       	ldi	r24, 0x14	; 20
     920:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	sendCommand(SSD1306_MEMORYMODE);	//0X20
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0x00);					//Horizontal address mode
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	
	
	sendCommand(SSD1306_SETPRECHARGE);//0XD9
     930:	89 ed       	ldi	r24, 0xD9	; 217
     932:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0xF1);
     936:	81 ef       	ldi	r24, 0xF1	; 241
     938:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	

	sendCommand(SSD1306_SETVCOMDETECT);
     93c:	8b ed       	ldi	r24, 0xDB	; 219
     93e:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	sendCommand(0x40);
     942:	80 e4       	ldi	r24, 0x40	; 64
     944:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	
	sendCommand(SSD1306_DISPLAYON);	//0XAF
     948:	8f ea       	ldi	r24, 0xAF	; 175
     94a:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
     94e:	08 95       	ret

00000950 <sendCommand_Plus2B>:
	i2c_write(command);
	i2c_stop();
}

void sendCommand_Plus2B(uint8_t command, uint8_t byte_1, uint8_t byte_2)
{
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	18 2f       	mov	r17, r24
     958:	d6 2f       	mov	r29, r22
     95a:	c4 2f       	mov	r28, r20
	i2c_start(SSD1306_DEFAULT_ADDRESS);
     95c:	88 e7       	ldi	r24, 0x78	; 120
     95e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
	i2c_write(command_byte);
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_write(command);
     968:	81 2f       	mov	r24, r17
     96a:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_write(byte_1);
     96e:	8d 2f       	mov	r24, r29
     970:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_write(byte_2);
     974:	8c 2f       	mov	r24, r28
     976:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_stop();
     97a:	0e 94 ba 03 	call	0x774	; 0x774 <i2c_stop>
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	08 95       	ret

00000986 <sendData>:
void sendData(uint8_t data)
{
     986:	cf 93       	push	r28
     988:	c8 2f       	mov	r28, r24
	i2c_start(SSD1306_DEFAULT_ADDRESS);
     98a:	88 e7       	ldi	r24, 0x78	; 120
     98c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_start>
	i2c_write(data_byte);
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_write(data);
     996:	8c 2f       	mov	r24, r28
     998:	0e 94 92 03 	call	0x724	; 0x724 <i2c_write>
	i2c_stop();
     99c:	0e 94 ba 03 	call	0x774	; 0x774 <i2c_stop>
	NOP();
     9a0:	0e 94 2b 05 	call	0xa56	; 0xa56 <NOP>
}
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <drawBuffer>:
	}
}


void drawBuffer(uint8_t *buffer)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	8c 01       	movw	r16, r24
	sendCommand_Plus2B(SSD1306_COLUMNADDR, 0, 127);//0X21, range from 0-127
     9b2:	4f e7       	ldi	r20, 0x7F	; 127
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	81 e2       	ldi	r24, 0x21	; 33
     9b8:	0e 94 a8 04 	call	0x950	; 0x950 <sendCommand_Plus2B>
	sendCommand_Plus2B(SSD1306_PAGEADDR, 0, 7);//0X22, range from 0-7
     9bc:	47 e0       	ldi	r20, 0x07	; 7
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	82 e2       	ldi	r24, 0x22	; 34
     9c2:	0e 94 a8 04 	call	0x950	; 0x950 <sendCommand_Plus2B>
     9c6:	e8 01       	movw	r28, r16
     9c8:	1c 5f       	subi	r17, 0xFC	; 252
	
	for (uint16_t i=0; i<1024; i++)
	{
		sendData(buffer[i]);
     9ca:	89 91       	ld	r24, Y+
     9cc:	0e 94 c3 04 	call	0x986	; 0x986 <sendData>
void drawBuffer(uint8_t *buffer)
{
	sendCommand_Plus2B(SSD1306_COLUMNADDR, 0, 127);//0X21, range from 0-127
	sendCommand_Plus2B(SSD1306_PAGEADDR, 0, 7);//0X22, range from 0-7
	
	for (uint16_t i=0; i<1024; i++)
     9d0:	c0 17       	cp	r28, r16
     9d2:	d1 07       	cpc	r29, r17
     9d4:	d1 f7       	brne	.-12     	; 0x9ca <drawBuffer+0x22>
	{
		sendData(buffer[i]);
	}
	
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	08 95       	ret

000009e0 <TIMER1_enable>:
 */ 
#include "includes.h"

void TIMER1_enable(void)
{
	TCCR1A = 0;     // set entire TCCR1A register to 0
     9e0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;     // same for TCCR1B
     9e4:	e1 e8       	ldi	r30, 0x81	; 129
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	10 82       	st	Z, r1
	
	// set compare match register to desired timer count
	OCR1A = 15624;// --> 1 SECOND
     9ea:	88 e0       	ldi	r24, 0x08	; 8
     9ec:	9d e3       	ldi	r25, 0x3D	; 61
     9ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//OCR1AH = 0x3D;                      //Load higher byte of 15624 into output compare register
	//OCR1AL = 0x08;                      //Load lower byte of 15624 into output compare register
	
	
	// Turn on CTC modeSet CS10 and CS12 bits for 1024 prescaler
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS12);
     9f6:	8d e0       	ldi	r24, 0x0D	; 13
     9f8:	80 83       	st	Z, r24
	
	//Clear ICF1, clear pending interrupts
	TIFR1 = 1<<ICF1;
     9fa:	80 e2       	ldi	r24, 0x20	; 32
     9fc:	86 bb       	out	0x16, r24	; 22
	
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
     9fe:	ef e6       	ldi	r30, 0x6F	; 111
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	80 83       	st	Z, r24
	
	
	TCNT1H=0;
     a08:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0;	
     a0c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a10:	08 95       	ret

00000a12 <USART_Init>:

//The purpose of this function is to initialize the USART.
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(baud>>8);
     a12:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)baud;
     a16:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter, enables interrupt on the RXC1 Flag */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
     a1a:	88 e9       	ldi	r24, 0x98	; 152
     a1c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);	
     a20:	86 e0       	ldi	r24, 0x06	; 6
     a22:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     a26:	08 95       	ret

00000a28 <USART_Transmit_byte>:
}

void USART_Transmit_byte( const char byte )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     a28:	e0 ec       	ldi	r30, 0xC0	; 192
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	90 81       	ld	r25, Z
     a2e:	95 ff       	sbrs	r25, 5
     a30:	fd cf       	rjmp	.-6      	; 0xa2c <USART_Transmit_byte+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     a32:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a36:	08 95       	ret

00000a38 <USART_Transmit_data>:
}

void USART_Transmit_data(const char * s)
{
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	ec 01       	movw	r28, r24
	while(*s!=0){
     a3e:	88 81       	ld	r24, Y
     a40:	88 23       	and	r24, r24
     a42:	31 f0       	breq	.+12     	; 0xa50 <USART_Transmit_data+0x18>
     a44:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_byte(*s);
     a46:	0e 94 14 05 	call	0xa28	; 0xa28 <USART_Transmit_byte>
	UDR0 = byte;
}

void USART_Transmit_data(const char * s)
{
	while(*s!=0){
     a4a:	89 91       	ld	r24, Y+
     a4c:	81 11       	cpse	r24, r1
     a4e:	fb cf       	rjmp	.-10     	; 0xa46 <USART_Transmit_data+0xe>
		USART_Transmit_byte(*s);
	*s++;}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <NOP>:
#include "includes.h"

char mensaje[20];

	
void NOP (void) {}
     a56:	08 95       	ret

00000a58 <test_1>:
	


void test_1 (void)
{
	sendCommand(0XA7);//Invert display
     a58:	87 ea       	ldi	r24, 0xA7	; 167
     a5a:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
	drawBuffer(buffer);//For 1024 With command send_Data(data)
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <drawBuffer>
     a66:	2f ef       	ldi	r18, 0xFF	; 255
     a68:	89 e6       	ldi	r24, 0x69	; 105
     a6a:	98 e1       	ldi	r25, 0x18	; 24
     a6c:	21 50       	subi	r18, 0x01	; 1
     a6e:	80 40       	sbci	r24, 0x00	; 0
     a70:	90 40       	sbci	r25, 0x00	; 0
     a72:	e1 f7       	brne	.-8      	; 0xa6c <test_1+0x14>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <test_1+0x1e>
     a76:	00 00       	nop
	_delay_ms(500);
	clearBuffer(buffer);
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 02 04 	call	0x804	; 0x804 <clearBuffer>
	sendCommand(SSD1306_NORMALDISPLAY);//Invert display
     a80:	86 ea       	ldi	r24, 0xA6	; 166
     a82:	0e 94 4d 04 	call	0x89a	; 0x89a <sendCommand>
     a86:	08 95       	ret

00000a88 <test_2>:
}


void test_2 (void)
{
	USART_Transmit_data("Hello my friend\r");	
     a88:	86 e1       	ldi	r24, 0x16	; 22
     a8a:	97 e0       	ldi	r25, 0x07	; 7
     a8c:	0e 94 1c 05 	call	0xa38	; 0xa38 <USART_Transmit_data>
     a90:	08 95       	ret

00000a92 <__divsf3>:
     a92:	0e 94 5d 05 	call	0xaba	; 0xaba <__divsf3x>
     a96:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_round>
     a9a:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_pscB>
     a9e:	58 f0       	brcs	.+22     	; 0xab6 <__divsf3+0x24>
     aa0:	0e 94 30 06 	call	0xc60	; 0xc60 <__fp_pscA>
     aa4:	40 f0       	brcs	.+16     	; 0xab6 <__divsf3+0x24>
     aa6:	29 f4       	brne	.+10     	; 0xab2 <__divsf3+0x20>
     aa8:	5f 3f       	cpi	r21, 0xFF	; 255
     aaa:	29 f0       	breq	.+10     	; 0xab6 <__divsf3+0x24>
     aac:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_inf>
     ab0:	51 11       	cpse	r21, r1
     ab2:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_szero>
     ab6:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__fp_nan>

00000aba <__divsf3x>:
     aba:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_split3>
     abe:	68 f3       	brcs	.-38     	; 0xa9a <__divsf3+0x8>

00000ac0 <__divsf3_pse>:
     ac0:	99 23       	and	r25, r25
     ac2:	b1 f3       	breq	.-20     	; 0xab0 <__divsf3+0x1e>
     ac4:	55 23       	and	r21, r21
     ac6:	91 f3       	breq	.-28     	; 0xaac <__divsf3+0x1a>
     ac8:	95 1b       	sub	r25, r21
     aca:	55 0b       	sbc	r21, r21
     acc:	bb 27       	eor	r27, r27
     ace:	aa 27       	eor	r26, r26
     ad0:	62 17       	cp	r22, r18
     ad2:	73 07       	cpc	r23, r19
     ad4:	84 07       	cpc	r24, r20
     ad6:	38 f0       	brcs	.+14     	; 0xae6 <__divsf3_pse+0x26>
     ad8:	9f 5f       	subi	r25, 0xFF	; 255
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	22 0f       	add	r18, r18
     ade:	33 1f       	adc	r19, r19
     ae0:	44 1f       	adc	r20, r20
     ae2:	aa 1f       	adc	r26, r26
     ae4:	a9 f3       	breq	.-22     	; 0xad0 <__divsf3_pse+0x10>
     ae6:	35 d0       	rcall	.+106    	; 0xb52 <__divsf3_pse+0x92>
     ae8:	0e 2e       	mov	r0, r30
     aea:	3a f0       	brmi	.+14     	; 0xafa <__divsf3_pse+0x3a>
     aec:	e0 e8       	ldi	r30, 0x80	; 128
     aee:	32 d0       	rcall	.+100    	; 0xb54 <__divsf3_pse+0x94>
     af0:	91 50       	subi	r25, 0x01	; 1
     af2:	50 40       	sbci	r21, 0x00	; 0
     af4:	e6 95       	lsr	r30
     af6:	00 1c       	adc	r0, r0
     af8:	ca f7       	brpl	.-14     	; 0xaec <__divsf3_pse+0x2c>
     afa:	2b d0       	rcall	.+86     	; 0xb52 <__divsf3_pse+0x92>
     afc:	fe 2f       	mov	r31, r30
     afe:	29 d0       	rcall	.+82     	; 0xb52 <__divsf3_pse+0x92>
     b00:	66 0f       	add	r22, r22
     b02:	77 1f       	adc	r23, r23
     b04:	88 1f       	adc	r24, r24
     b06:	bb 1f       	adc	r27, r27
     b08:	26 17       	cp	r18, r22
     b0a:	37 07       	cpc	r19, r23
     b0c:	48 07       	cpc	r20, r24
     b0e:	ab 07       	cpc	r26, r27
     b10:	b0 e8       	ldi	r27, 0x80	; 128
     b12:	09 f0       	breq	.+2      	; 0xb16 <__divsf3_pse+0x56>
     b14:	bb 0b       	sbc	r27, r27
     b16:	80 2d       	mov	r24, r0
     b18:	bf 01       	movw	r22, r30
     b1a:	ff 27       	eor	r31, r31
     b1c:	93 58       	subi	r25, 0x83	; 131
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	3a f0       	brmi	.+14     	; 0xb30 <__divsf3_pse+0x70>
     b22:	9e 3f       	cpi	r25, 0xFE	; 254
     b24:	51 05       	cpc	r21, r1
     b26:	78 f0       	brcs	.+30     	; 0xb46 <__divsf3_pse+0x86>
     b28:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_inf>
     b2c:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_szero>
     b30:	5f 3f       	cpi	r21, 0xFF	; 255
     b32:	e4 f3       	brlt	.-8      	; 0xb2c <__divsf3_pse+0x6c>
     b34:	98 3e       	cpi	r25, 0xE8	; 232
     b36:	d4 f3       	brlt	.-12     	; 0xb2c <__divsf3_pse+0x6c>
     b38:	86 95       	lsr	r24
     b3a:	77 95       	ror	r23
     b3c:	67 95       	ror	r22
     b3e:	b7 95       	ror	r27
     b40:	f7 95       	ror	r31
     b42:	9f 5f       	subi	r25, 0xFF	; 255
     b44:	c9 f7       	brne	.-14     	; 0xb38 <__divsf3_pse+0x78>
     b46:	88 0f       	add	r24, r24
     b48:	91 1d       	adc	r25, r1
     b4a:	96 95       	lsr	r25
     b4c:	87 95       	ror	r24
     b4e:	97 f9       	bld	r25, 7
     b50:	08 95       	ret
     b52:	e1 e0       	ldi	r30, 0x01	; 1
     b54:	66 0f       	add	r22, r22
     b56:	77 1f       	adc	r23, r23
     b58:	88 1f       	adc	r24, r24
     b5a:	bb 1f       	adc	r27, r27
     b5c:	62 17       	cp	r22, r18
     b5e:	73 07       	cpc	r23, r19
     b60:	84 07       	cpc	r24, r20
     b62:	ba 07       	cpc	r27, r26
     b64:	20 f0       	brcs	.+8      	; 0xb6e <__divsf3_pse+0xae>
     b66:	62 1b       	sub	r22, r18
     b68:	73 0b       	sbc	r23, r19
     b6a:	84 0b       	sbc	r24, r20
     b6c:	ba 0b       	sbc	r27, r26
     b6e:	ee 1f       	adc	r30, r30
     b70:	88 f7       	brcc	.-30     	; 0xb54 <__divsf3_pse+0x94>
     b72:	e0 95       	com	r30
     b74:	08 95       	ret

00000b76 <__fixunssfsi>:
     b76:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_splitA>
     b7a:	88 f0       	brcs	.+34     	; 0xb9e <__fixunssfsi+0x28>
     b7c:	9f 57       	subi	r25, 0x7F	; 127
     b7e:	98 f0       	brcs	.+38     	; 0xba6 <__fixunssfsi+0x30>
     b80:	b9 2f       	mov	r27, r25
     b82:	99 27       	eor	r25, r25
     b84:	b7 51       	subi	r27, 0x17	; 23
     b86:	b0 f0       	brcs	.+44     	; 0xbb4 <__fixunssfsi+0x3e>
     b88:	e1 f0       	breq	.+56     	; 0xbc2 <__fixunssfsi+0x4c>
     b8a:	66 0f       	add	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	88 1f       	adc	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	1a f0       	brmi	.+6      	; 0xb9a <__fixunssfsi+0x24>
     b94:	ba 95       	dec	r27
     b96:	c9 f7       	brne	.-14     	; 0xb8a <__fixunssfsi+0x14>
     b98:	14 c0       	rjmp	.+40     	; 0xbc2 <__fixunssfsi+0x4c>
     b9a:	b1 30       	cpi	r27, 0x01	; 1
     b9c:	91 f0       	breq	.+36     	; 0xbc2 <__fixunssfsi+0x4c>
     b9e:	0e 94 71 06 	call	0xce2	; 0xce2 <__fp_zero>
     ba2:	b1 e0       	ldi	r27, 0x01	; 1
     ba4:	08 95       	ret
     ba6:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_zero>
     baa:	67 2f       	mov	r22, r23
     bac:	78 2f       	mov	r23, r24
     bae:	88 27       	eor	r24, r24
     bb0:	b8 5f       	subi	r27, 0xF8	; 248
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <__fixunssfsi+0x4c>
     bb4:	b9 3f       	cpi	r27, 0xF9	; 249
     bb6:	cc f3       	brlt	.-14     	; 0xbaa <__fixunssfsi+0x34>
     bb8:	86 95       	lsr	r24
     bba:	77 95       	ror	r23
     bbc:	67 95       	ror	r22
     bbe:	b3 95       	inc	r27
     bc0:	d9 f7       	brne	.-10     	; 0xbb8 <__fixunssfsi+0x42>
     bc2:	3e f4       	brtc	.+14     	; 0xbd2 <__fixunssfsi+0x5c>
     bc4:	90 95       	com	r25
     bc6:	80 95       	com	r24
     bc8:	70 95       	com	r23
     bca:	61 95       	neg	r22
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	8f 4f       	sbci	r24, 0xFF	; 255
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	08 95       	ret

00000bd4 <__floatunsisf>:
     bd4:	e8 94       	clt
     bd6:	09 c0       	rjmp	.+18     	; 0xbea <__floatsisf+0x12>

00000bd8 <__floatsisf>:
     bd8:	97 fb       	bst	r25, 7
     bda:	3e f4       	brtc	.+14     	; 0xbea <__floatsisf+0x12>
     bdc:	90 95       	com	r25
     bde:	80 95       	com	r24
     be0:	70 95       	com	r23
     be2:	61 95       	neg	r22
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	8f 4f       	sbci	r24, 0xFF	; 255
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	99 23       	and	r25, r25
     bec:	a9 f0       	breq	.+42     	; 0xc18 <__floatsisf+0x40>
     bee:	f9 2f       	mov	r31, r25
     bf0:	96 e9       	ldi	r25, 0x96	; 150
     bf2:	bb 27       	eor	r27, r27
     bf4:	93 95       	inc	r25
     bf6:	f6 95       	lsr	r31
     bf8:	87 95       	ror	r24
     bfa:	77 95       	ror	r23
     bfc:	67 95       	ror	r22
     bfe:	b7 95       	ror	r27
     c00:	f1 11       	cpse	r31, r1
     c02:	f8 cf       	rjmp	.-16     	; 0xbf4 <__floatsisf+0x1c>
     c04:	fa f4       	brpl	.+62     	; 0xc44 <__floatsisf+0x6c>
     c06:	bb 0f       	add	r27, r27
     c08:	11 f4       	brne	.+4      	; 0xc0e <__floatsisf+0x36>
     c0a:	60 ff       	sbrs	r22, 0
     c0c:	1b c0       	rjmp	.+54     	; 0xc44 <__floatsisf+0x6c>
     c0e:	6f 5f       	subi	r22, 0xFF	; 255
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	8f 4f       	sbci	r24, 0xFF	; 255
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	16 c0       	rjmp	.+44     	; 0xc44 <__floatsisf+0x6c>
     c18:	88 23       	and	r24, r24
     c1a:	11 f0       	breq	.+4      	; 0xc20 <__floatsisf+0x48>
     c1c:	96 e9       	ldi	r25, 0x96	; 150
     c1e:	11 c0       	rjmp	.+34     	; 0xc42 <__floatsisf+0x6a>
     c20:	77 23       	and	r23, r23
     c22:	21 f0       	breq	.+8      	; 0xc2c <__floatsisf+0x54>
     c24:	9e e8       	ldi	r25, 0x8E	; 142
     c26:	87 2f       	mov	r24, r23
     c28:	76 2f       	mov	r23, r22
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <__floatsisf+0x5e>
     c2c:	66 23       	and	r22, r22
     c2e:	71 f0       	breq	.+28     	; 0xc4c <__floatsisf+0x74>
     c30:	96 e8       	ldi	r25, 0x86	; 134
     c32:	86 2f       	mov	r24, r22
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	2a f0       	brmi	.+10     	; 0xc44 <__floatsisf+0x6c>
     c3a:	9a 95       	dec	r25
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	88 1f       	adc	r24, r24
     c42:	da f7       	brpl	.-10     	; 0xc3a <__floatsisf+0x62>
     c44:	88 0f       	add	r24, r24
     c46:	96 95       	lsr	r25
     c48:	87 95       	ror	r24
     c4a:	97 f9       	bld	r25, 7
     c4c:	08 95       	ret

00000c4e <__fp_inf>:
     c4e:	97 f9       	bld	r25, 7
     c50:	9f 67       	ori	r25, 0x7F	; 127
     c52:	80 e8       	ldi	r24, 0x80	; 128
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	08 95       	ret

00000c5a <__fp_nan>:
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	80 ec       	ldi	r24, 0xC0	; 192
     c5e:	08 95       	ret

00000c60 <__fp_pscA>:
     c60:	00 24       	eor	r0, r0
     c62:	0a 94       	dec	r0
     c64:	16 16       	cp	r1, r22
     c66:	17 06       	cpc	r1, r23
     c68:	18 06       	cpc	r1, r24
     c6a:	09 06       	cpc	r0, r25
     c6c:	08 95       	ret

00000c6e <__fp_pscB>:
     c6e:	00 24       	eor	r0, r0
     c70:	0a 94       	dec	r0
     c72:	12 16       	cp	r1, r18
     c74:	13 06       	cpc	r1, r19
     c76:	14 06       	cpc	r1, r20
     c78:	05 06       	cpc	r0, r21
     c7a:	08 95       	ret

00000c7c <__fp_round>:
     c7c:	09 2e       	mov	r0, r25
     c7e:	03 94       	inc	r0
     c80:	00 0c       	add	r0, r0
     c82:	11 f4       	brne	.+4      	; 0xc88 <__fp_round+0xc>
     c84:	88 23       	and	r24, r24
     c86:	52 f0       	brmi	.+20     	; 0xc9c <__fp_round+0x20>
     c88:	bb 0f       	add	r27, r27
     c8a:	40 f4       	brcc	.+16     	; 0xc9c <__fp_round+0x20>
     c8c:	bf 2b       	or	r27, r31
     c8e:	11 f4       	brne	.+4      	; 0xc94 <__fp_round+0x18>
     c90:	60 ff       	sbrs	r22, 0
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <__fp_round+0x20>
     c94:	6f 5f       	subi	r22, 0xFF	; 255
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	8f 4f       	sbci	r24, 0xFF	; 255
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	08 95       	ret

00000c9e <__fp_split3>:
     c9e:	57 fd       	sbrc	r21, 7
     ca0:	90 58       	subi	r25, 0x80	; 128
     ca2:	44 0f       	add	r20, r20
     ca4:	55 1f       	adc	r21, r21
     ca6:	59 f0       	breq	.+22     	; 0xcbe <__fp_splitA+0x10>
     ca8:	5f 3f       	cpi	r21, 0xFF	; 255
     caa:	71 f0       	breq	.+28     	; 0xcc8 <__fp_splitA+0x1a>
     cac:	47 95       	ror	r20

00000cae <__fp_splitA>:
     cae:	88 0f       	add	r24, r24
     cb0:	97 fb       	bst	r25, 7
     cb2:	99 1f       	adc	r25, r25
     cb4:	61 f0       	breq	.+24     	; 0xcce <__fp_splitA+0x20>
     cb6:	9f 3f       	cpi	r25, 0xFF	; 255
     cb8:	79 f0       	breq	.+30     	; 0xcd8 <__fp_splitA+0x2a>
     cba:	87 95       	ror	r24
     cbc:	08 95       	ret
     cbe:	12 16       	cp	r1, r18
     cc0:	13 06       	cpc	r1, r19
     cc2:	14 06       	cpc	r1, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	f2 cf       	rjmp	.-28     	; 0xcac <__fp_split3+0xe>
     cc8:	46 95       	lsr	r20
     cca:	f1 df       	rcall	.-30     	; 0xcae <__fp_splitA>
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <__fp_splitA+0x30>
     cce:	16 16       	cp	r1, r22
     cd0:	17 06       	cpc	r1, r23
     cd2:	18 06       	cpc	r1, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	f1 cf       	rjmp	.-30     	; 0xcba <__fp_splitA+0xc>
     cd8:	86 95       	lsr	r24
     cda:	71 05       	cpc	r23, r1
     cdc:	61 05       	cpc	r22, r1
     cde:	08 94       	sec
     ce0:	08 95       	ret

00000ce2 <__fp_zero>:
     ce2:	e8 94       	clt

00000ce4 <__fp_szero>:
     ce4:	bb 27       	eor	r27, r27
     ce6:	66 27       	eor	r22, r22
     ce8:	77 27       	eor	r23, r23
     cea:	cb 01       	movw	r24, r22
     cec:	97 f9       	bld	r25, 7
     cee:	08 95       	ret

00000cf0 <sprintf>:
     cf0:	ae e0       	ldi	r26, 0x0E	; 14
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ee e7       	ldi	r30, 0x7E	; 126
     cf6:	f6 e0       	ldi	r31, 0x06	; 6
     cf8:	0c 94 27 09 	jmp	0x124e	; 0x124e <__prologue_saves__+0x1c>
     cfc:	0d 89       	ldd	r16, Y+21	; 0x15
     cfe:	1e 89       	ldd	r17, Y+22	; 0x16
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	8c 83       	std	Y+4, r24	; 0x04
     d04:	1a 83       	std	Y+2, r17	; 0x02
     d06:	09 83       	std	Y+1, r16	; 0x01
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	9f e7       	ldi	r25, 0x7F	; 127
     d0c:	9e 83       	std	Y+6, r25	; 0x06
     d0e:	8d 83       	std	Y+5, r24	; 0x05
     d10:	ae 01       	movw	r20, r28
     d12:	47 5e       	subi	r20, 0xE7	; 231
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	6f 89       	ldd	r22, Y+23	; 0x17
     d18:	78 8d       	ldd	r23, Y+24	; 0x18
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	0e 94 9b 06 	call	0xd36	; 0xd36 <vfprintf>
     d22:	2f 81       	ldd	r18, Y+7	; 0x07
     d24:	38 85       	ldd	r19, Y+8	; 0x08
     d26:	f8 01       	movw	r30, r16
     d28:	e2 0f       	add	r30, r18
     d2a:	f3 1f       	adc	r31, r19
     d2c:	10 82       	st	Z, r1
     d2e:	2e 96       	adiw	r28, 0x0e	; 14
     d30:	e4 e0       	ldi	r30, 0x04	; 4
     d32:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__epilogue_restores__+0x1c>

00000d36 <vfprintf>:
     d36:	ac e0       	ldi	r26, 0x0C	; 12
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e1 ea       	ldi	r30, 0xA1	; 161
     d3c:	f6 e0       	ldi	r31, 0x06	; 6
     d3e:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__prologue_saves__>
     d42:	7c 01       	movw	r14, r24
     d44:	6b 01       	movw	r12, r22
     d46:	8a 01       	movw	r16, r20
     d48:	fc 01       	movw	r30, r24
     d4a:	17 82       	std	Z+7, r1	; 0x07
     d4c:	16 82       	std	Z+6, r1	; 0x06
     d4e:	83 81       	ldd	r24, Z+3	; 0x03
     d50:	81 ff       	sbrs	r24, 1
     d52:	bd c1       	rjmp	.+890    	; 0x10ce <vfprintf+0x398>
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	4c 01       	movw	r8, r24
     d5a:	f7 01       	movw	r30, r14
     d5c:	93 81       	ldd	r25, Z+3	; 0x03
     d5e:	f6 01       	movw	r30, r12
     d60:	93 fd       	sbrc	r25, 3
     d62:	85 91       	lpm	r24, Z+
     d64:	93 ff       	sbrs	r25, 3
     d66:	81 91       	ld	r24, Z+
     d68:	6f 01       	movw	r12, r30
     d6a:	88 23       	and	r24, r24
     d6c:	09 f4       	brne	.+2      	; 0xd70 <vfprintf+0x3a>
     d6e:	ab c1       	rjmp	.+854    	; 0x10c6 <vfprintf+0x390>
     d70:	85 32       	cpi	r24, 0x25	; 37
     d72:	39 f4       	brne	.+14     	; 0xd82 <vfprintf+0x4c>
     d74:	93 fd       	sbrc	r25, 3
     d76:	85 91       	lpm	r24, Z+
     d78:	93 ff       	sbrs	r25, 3
     d7a:	81 91       	ld	r24, Z+
     d7c:	6f 01       	movw	r12, r30
     d7e:	85 32       	cpi	r24, 0x25	; 37
     d80:	29 f4       	brne	.+10     	; 0xd8c <vfprintf+0x56>
     d82:	b7 01       	movw	r22, r14
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     d8a:	e7 cf       	rjmp	.-50     	; 0xd5a <vfprintf+0x24>
     d8c:	51 2c       	mov	r5, r1
     d8e:	31 2c       	mov	r3, r1
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	20 32       	cpi	r18, 0x20	; 32
     d94:	a0 f4       	brcc	.+40     	; 0xdbe <vfprintf+0x88>
     d96:	8b 32       	cpi	r24, 0x2B	; 43
     d98:	69 f0       	breq	.+26     	; 0xdb4 <vfprintf+0x7e>
     d9a:	30 f4       	brcc	.+12     	; 0xda8 <vfprintf+0x72>
     d9c:	80 32       	cpi	r24, 0x20	; 32
     d9e:	59 f0       	breq	.+22     	; 0xdb6 <vfprintf+0x80>
     da0:	83 32       	cpi	r24, 0x23	; 35
     da2:	69 f4       	brne	.+26     	; 0xdbe <vfprintf+0x88>
     da4:	20 61       	ori	r18, 0x10	; 16
     da6:	2c c0       	rjmp	.+88     	; 0xe00 <vfprintf+0xca>
     da8:	8d 32       	cpi	r24, 0x2D	; 45
     daa:	39 f0       	breq	.+14     	; 0xdba <vfprintf+0x84>
     dac:	80 33       	cpi	r24, 0x30	; 48
     dae:	39 f4       	brne	.+14     	; 0xdbe <vfprintf+0x88>
     db0:	21 60       	ori	r18, 0x01	; 1
     db2:	26 c0       	rjmp	.+76     	; 0xe00 <vfprintf+0xca>
     db4:	22 60       	ori	r18, 0x02	; 2
     db6:	24 60       	ori	r18, 0x04	; 4
     db8:	23 c0       	rjmp	.+70     	; 0xe00 <vfprintf+0xca>
     dba:	28 60       	ori	r18, 0x08	; 8
     dbc:	21 c0       	rjmp	.+66     	; 0xe00 <vfprintf+0xca>
     dbe:	27 fd       	sbrc	r18, 7
     dc0:	27 c0       	rjmp	.+78     	; 0xe10 <vfprintf+0xda>
     dc2:	30 ed       	ldi	r19, 0xD0	; 208
     dc4:	38 0f       	add	r19, r24
     dc6:	3a 30       	cpi	r19, 0x0A	; 10
     dc8:	78 f4       	brcc	.+30     	; 0xde8 <vfprintf+0xb2>
     dca:	26 ff       	sbrs	r18, 6
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <vfprintf+0xa4>
     dce:	fa e0       	ldi	r31, 0x0A	; 10
     dd0:	5f 9e       	mul	r5, r31
     dd2:	30 0d       	add	r19, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	53 2e       	mov	r5, r19
     dd8:	13 c0       	rjmp	.+38     	; 0xe00 <vfprintf+0xca>
     dda:	8a e0       	ldi	r24, 0x0A	; 10
     ddc:	38 9e       	mul	r3, r24
     dde:	30 0d       	add	r19, r0
     de0:	11 24       	eor	r1, r1
     de2:	33 2e       	mov	r3, r19
     de4:	20 62       	ori	r18, 0x20	; 32
     de6:	0c c0       	rjmp	.+24     	; 0xe00 <vfprintf+0xca>
     de8:	8e 32       	cpi	r24, 0x2E	; 46
     dea:	21 f4       	brne	.+8      	; 0xdf4 <vfprintf+0xbe>
     dec:	26 fd       	sbrc	r18, 6
     dee:	6b c1       	rjmp	.+726    	; 0x10c6 <vfprintf+0x390>
     df0:	20 64       	ori	r18, 0x40	; 64
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0xca>
     df4:	8c 36       	cpi	r24, 0x6C	; 108
     df6:	11 f4       	brne	.+4      	; 0xdfc <vfprintf+0xc6>
     df8:	20 68       	ori	r18, 0x80	; 128
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <vfprintf+0xca>
     dfc:	88 36       	cpi	r24, 0x68	; 104
     dfe:	41 f4       	brne	.+16     	; 0xe10 <vfprintf+0xda>
     e00:	f6 01       	movw	r30, r12
     e02:	93 fd       	sbrc	r25, 3
     e04:	85 91       	lpm	r24, Z+
     e06:	93 ff       	sbrs	r25, 3
     e08:	81 91       	ld	r24, Z+
     e0a:	6f 01       	movw	r12, r30
     e0c:	81 11       	cpse	r24, r1
     e0e:	c1 cf       	rjmp	.-126    	; 0xd92 <vfprintf+0x5c>
     e10:	98 2f       	mov	r25, r24
     e12:	9f 7d       	andi	r25, 0xDF	; 223
     e14:	95 54       	subi	r25, 0x45	; 69
     e16:	93 30       	cpi	r25, 0x03	; 3
     e18:	28 f4       	brcc	.+10     	; 0xe24 <vfprintf+0xee>
     e1a:	0c 5f       	subi	r16, 0xFC	; 252
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	ff e3       	ldi	r31, 0x3F	; 63
     e20:	f9 83       	std	Y+1, r31	; 0x01
     e22:	0d c0       	rjmp	.+26     	; 0xe3e <vfprintf+0x108>
     e24:	83 36       	cpi	r24, 0x63	; 99
     e26:	31 f0       	breq	.+12     	; 0xe34 <vfprintf+0xfe>
     e28:	83 37       	cpi	r24, 0x73	; 115
     e2a:	71 f0       	breq	.+28     	; 0xe48 <vfprintf+0x112>
     e2c:	83 35       	cpi	r24, 0x53	; 83
     e2e:	09 f0       	breq	.+2      	; 0xe32 <vfprintf+0xfc>
     e30:	5b c0       	rjmp	.+182    	; 0xee8 <vfprintf+0x1b2>
     e32:	22 c0       	rjmp	.+68     	; 0xe78 <vfprintf+0x142>
     e34:	f8 01       	movw	r30, r16
     e36:	80 81       	ld	r24, Z
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	0e 5f       	subi	r16, 0xFE	; 254
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	44 24       	eor	r4, r4
     e40:	43 94       	inc	r4
     e42:	51 2c       	mov	r5, r1
     e44:	54 01       	movw	r10, r8
     e46:	15 c0       	rjmp	.+42     	; 0xe72 <vfprintf+0x13c>
     e48:	38 01       	movw	r6, r16
     e4a:	f2 e0       	ldi	r31, 0x02	; 2
     e4c:	6f 0e       	add	r6, r31
     e4e:	71 1c       	adc	r7, r1
     e50:	f8 01       	movw	r30, r16
     e52:	a0 80       	ld	r10, Z
     e54:	b1 80       	ldd	r11, Z+1	; 0x01
     e56:	26 ff       	sbrs	r18, 6
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <vfprintf+0x12a>
     e5a:	65 2d       	mov	r22, r5
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0x12e>
     e60:	6f ef       	ldi	r22, 0xFF	; 255
     e62:	7f ef       	ldi	r23, 0xFF	; 255
     e64:	c5 01       	movw	r24, r10
     e66:	2c 87       	std	Y+12, r18	; 0x0c
     e68:	0e 94 78 08 	call	0x10f0	; 0x10f0 <strnlen>
     e6c:	2c 01       	movw	r4, r24
     e6e:	83 01       	movw	r16, r6
     e70:	2c 85       	ldd	r18, Y+12	; 0x0c
     e72:	2f 77       	andi	r18, 0x7F	; 127
     e74:	22 2e       	mov	r2, r18
     e76:	17 c0       	rjmp	.+46     	; 0xea6 <vfprintf+0x170>
     e78:	38 01       	movw	r6, r16
     e7a:	f2 e0       	ldi	r31, 0x02	; 2
     e7c:	6f 0e       	add	r6, r31
     e7e:	71 1c       	adc	r7, r1
     e80:	f8 01       	movw	r30, r16
     e82:	a0 80       	ld	r10, Z
     e84:	b1 80       	ldd	r11, Z+1	; 0x01
     e86:	26 ff       	sbrs	r18, 6
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <vfprintf+0x15a>
     e8a:	65 2d       	mov	r22, r5
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <vfprintf+0x15e>
     e90:	6f ef       	ldi	r22, 0xFF	; 255
     e92:	7f ef       	ldi	r23, 0xFF	; 255
     e94:	c5 01       	movw	r24, r10
     e96:	2c 87       	std	Y+12, r18	; 0x0c
     e98:	0e 94 6d 08 	call	0x10da	; 0x10da <strnlen_P>
     e9c:	2c 01       	movw	r4, r24
     e9e:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea0:	20 68       	ori	r18, 0x80	; 128
     ea2:	22 2e       	mov	r2, r18
     ea4:	83 01       	movw	r16, r6
     ea6:	23 fc       	sbrc	r2, 3
     ea8:	1b c0       	rjmp	.+54     	; 0xee0 <vfprintf+0x1aa>
     eaa:	83 2d       	mov	r24, r3
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	48 16       	cp	r4, r24
     eb0:	59 06       	cpc	r5, r25
     eb2:	b0 f4       	brcc	.+44     	; 0xee0 <vfprintf+0x1aa>
     eb4:	b7 01       	movw	r22, r14
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     ebe:	3a 94       	dec	r3
     ec0:	f4 cf       	rjmp	.-24     	; 0xeaa <vfprintf+0x174>
     ec2:	f5 01       	movw	r30, r10
     ec4:	27 fc       	sbrc	r2, 7
     ec6:	85 91       	lpm	r24, Z+
     ec8:	27 fe       	sbrs	r2, 7
     eca:	81 91       	ld	r24, Z+
     ecc:	5f 01       	movw	r10, r30
     ece:	b7 01       	movw	r22, r14
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
     ed6:	31 10       	cpse	r3, r1
     ed8:	3a 94       	dec	r3
     eda:	f1 e0       	ldi	r31, 0x01	; 1
     edc:	4f 1a       	sub	r4, r31
     ede:	51 08       	sbc	r5, r1
     ee0:	41 14       	cp	r4, r1
     ee2:	51 04       	cpc	r5, r1
     ee4:	71 f7       	brne	.-36     	; 0xec2 <vfprintf+0x18c>
     ee6:	e5 c0       	rjmp	.+458    	; 0x10b2 <vfprintf+0x37c>
     ee8:	84 36       	cpi	r24, 0x64	; 100
     eea:	11 f0       	breq	.+4      	; 0xef0 <vfprintf+0x1ba>
     eec:	89 36       	cpi	r24, 0x69	; 105
     eee:	39 f5       	brne	.+78     	; 0xf3e <vfprintf+0x208>
     ef0:	f8 01       	movw	r30, r16
     ef2:	27 ff       	sbrs	r18, 7
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <vfprintf+0x1ce>
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	0c 5f       	subi	r16, 0xFC	; 252
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <vfprintf+0x1de>
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	07 2e       	mov	r0, r23
     f0a:	00 0c       	add	r0, r0
     f0c:	88 0b       	sbc	r24, r24
     f0e:	99 0b       	sbc	r25, r25
     f10:	0e 5f       	subi	r16, 0xFE	; 254
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	2f 76       	andi	r18, 0x6F	; 111
     f16:	72 2e       	mov	r7, r18
     f18:	97 ff       	sbrs	r25, 7
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <vfprintf+0x1f8>
     f1c:	90 95       	com	r25
     f1e:	80 95       	com	r24
     f20:	70 95       	com	r23
     f22:	61 95       	neg	r22
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	8f 4f       	sbci	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	20 68       	ori	r18, 0x80	; 128
     f2c:	72 2e       	mov	r7, r18
     f2e:	2a e0       	ldi	r18, 0x0A	; 10
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	a4 01       	movw	r20, r8
     f34:	0e 94 bb 08 	call	0x1176	; 0x1176 <__ultoa_invert>
     f38:	a8 2e       	mov	r10, r24
     f3a:	a8 18       	sub	r10, r8
     f3c:	44 c0       	rjmp	.+136    	; 0xfc6 <vfprintf+0x290>
     f3e:	85 37       	cpi	r24, 0x75	; 117
     f40:	29 f4       	brne	.+10     	; 0xf4c <vfprintf+0x216>
     f42:	2f 7e       	andi	r18, 0xEF	; 239
     f44:	b2 2e       	mov	r11, r18
     f46:	2a e0       	ldi	r18, 0x0A	; 10
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	25 c0       	rjmp	.+74     	; 0xf96 <vfprintf+0x260>
     f4c:	f2 2f       	mov	r31, r18
     f4e:	f9 7f       	andi	r31, 0xF9	; 249
     f50:	bf 2e       	mov	r11, r31
     f52:	8f 36       	cpi	r24, 0x6F	; 111
     f54:	c1 f0       	breq	.+48     	; 0xf86 <vfprintf+0x250>
     f56:	18 f4       	brcc	.+6      	; 0xf5e <vfprintf+0x228>
     f58:	88 35       	cpi	r24, 0x58	; 88
     f5a:	79 f0       	breq	.+30     	; 0xf7a <vfprintf+0x244>
     f5c:	b4 c0       	rjmp	.+360    	; 0x10c6 <vfprintf+0x390>
     f5e:	80 37       	cpi	r24, 0x70	; 112
     f60:	19 f0       	breq	.+6      	; 0xf68 <vfprintf+0x232>
     f62:	88 37       	cpi	r24, 0x78	; 120
     f64:	21 f0       	breq	.+8      	; 0xf6e <vfprintf+0x238>
     f66:	af c0       	rjmp	.+350    	; 0x10c6 <vfprintf+0x390>
     f68:	2f 2f       	mov	r18, r31
     f6a:	20 61       	ori	r18, 0x10	; 16
     f6c:	b2 2e       	mov	r11, r18
     f6e:	b4 fe       	sbrs	r11, 4
     f70:	0d c0       	rjmp	.+26     	; 0xf8c <vfprintf+0x256>
     f72:	8b 2d       	mov	r24, r11
     f74:	84 60       	ori	r24, 0x04	; 4
     f76:	b8 2e       	mov	r11, r24
     f78:	09 c0       	rjmp	.+18     	; 0xf8c <vfprintf+0x256>
     f7a:	24 ff       	sbrs	r18, 4
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <vfprintf+0x25c>
     f7e:	9f 2f       	mov	r25, r31
     f80:	96 60       	ori	r25, 0x06	; 6
     f82:	b9 2e       	mov	r11, r25
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <vfprintf+0x25c>
     f86:	28 e0       	ldi	r18, 0x08	; 8
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	05 c0       	rjmp	.+10     	; 0xf96 <vfprintf+0x260>
     f8c:	20 e1       	ldi	r18, 0x10	; 16
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <vfprintf+0x260>
     f92:	20 e1       	ldi	r18, 0x10	; 16
     f94:	32 e0       	ldi	r19, 0x02	; 2
     f96:	f8 01       	movw	r30, r16
     f98:	b7 fe       	sbrs	r11, 7
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <vfprintf+0x274>
     f9c:	60 81       	ld	r22, Z
     f9e:	71 81       	ldd	r23, Z+1	; 0x01
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	93 81       	ldd	r25, Z+3	; 0x03
     fa4:	0c 5f       	subi	r16, 0xFC	; 252
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <vfprintf+0x280>
     faa:	60 81       	ld	r22, Z
     fac:	71 81       	ldd	r23, Z+1	; 0x01
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 5f       	subi	r16, 0xFE	; 254
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	a4 01       	movw	r20, r8
     fb8:	0e 94 bb 08 	call	0x1176	; 0x1176 <__ultoa_invert>
     fbc:	a8 2e       	mov	r10, r24
     fbe:	a8 18       	sub	r10, r8
     fc0:	fb 2d       	mov	r31, r11
     fc2:	ff 77       	andi	r31, 0x7F	; 127
     fc4:	7f 2e       	mov	r7, r31
     fc6:	76 fe       	sbrs	r7, 6
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <vfprintf+0x2aa>
     fca:	37 2d       	mov	r19, r7
     fcc:	3e 7f       	andi	r19, 0xFE	; 254
     fce:	a5 14       	cp	r10, r5
     fd0:	50 f4       	brcc	.+20     	; 0xfe6 <vfprintf+0x2b0>
     fd2:	74 fe       	sbrs	r7, 4
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <vfprintf+0x2b4>
     fd6:	72 fc       	sbrc	r7, 2
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <vfprintf+0x2b4>
     fda:	37 2d       	mov	r19, r7
     fdc:	3e 7e       	andi	r19, 0xEE	; 238
     fde:	05 c0       	rjmp	.+10     	; 0xfea <vfprintf+0x2b4>
     fe0:	ba 2c       	mov	r11, r10
     fe2:	37 2d       	mov	r19, r7
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <vfprintf+0x2b6>
     fe6:	ba 2c       	mov	r11, r10
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <vfprintf+0x2b6>
     fea:	b5 2c       	mov	r11, r5
     fec:	34 ff       	sbrs	r19, 4
     fee:	0d c0       	rjmp	.+26     	; 0x100a <vfprintf+0x2d4>
     ff0:	fe 01       	movw	r30, r28
     ff2:	ea 0d       	add	r30, r10
     ff4:	f1 1d       	adc	r31, r1
     ff6:	80 81       	ld	r24, Z
     ff8:	80 33       	cpi	r24, 0x30	; 48
     ffa:	11 f4       	brne	.+4      	; 0x1000 <vfprintf+0x2ca>
     ffc:	39 7e       	andi	r19, 0xE9	; 233
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <vfprintf+0x2dc>
    1000:	32 ff       	sbrs	r19, 2
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <vfprintf+0x2da>
    1004:	b3 94       	inc	r11
    1006:	b3 94       	inc	r11
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <vfprintf+0x2dc>
    100a:	83 2f       	mov	r24, r19
    100c:	86 78       	andi	r24, 0x86	; 134
    100e:	09 f0       	breq	.+2      	; 0x1012 <vfprintf+0x2dc>
    1010:	b3 94       	inc	r11
    1012:	33 fd       	sbrc	r19, 3
    1014:	13 c0       	rjmp	.+38     	; 0x103c <vfprintf+0x306>
    1016:	30 ff       	sbrs	r19, 0
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <vfprintf+0x2f0>
    101a:	5a 2c       	mov	r5, r10
    101c:	b3 14       	cp	r11, r3
    101e:	18 f4       	brcc	.+6      	; 0x1026 <vfprintf+0x2f0>
    1020:	53 0c       	add	r5, r3
    1022:	5b 18       	sub	r5, r11
    1024:	b3 2c       	mov	r11, r3
    1026:	b3 14       	cp	r11, r3
    1028:	68 f4       	brcc	.+26     	; 0x1044 <vfprintf+0x30e>
    102a:	b7 01       	movw	r22, r14
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	3c 87       	std	Y+12, r19	; 0x0c
    1032:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
    1036:	b3 94       	inc	r11
    1038:	3c 85       	ldd	r19, Y+12	; 0x0c
    103a:	f5 cf       	rjmp	.-22     	; 0x1026 <vfprintf+0x2f0>
    103c:	b3 14       	cp	r11, r3
    103e:	10 f4       	brcc	.+4      	; 0x1044 <vfprintf+0x30e>
    1040:	3b 18       	sub	r3, r11
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <vfprintf+0x310>
    1044:	31 2c       	mov	r3, r1
    1046:	34 ff       	sbrs	r19, 4
    1048:	12 c0       	rjmp	.+36     	; 0x106e <vfprintf+0x338>
    104a:	b7 01       	movw	r22, r14
    104c:	80 e3       	ldi	r24, 0x30	; 48
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	3c 87       	std	Y+12, r19	; 0x0c
    1052:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
    1056:	3c 85       	ldd	r19, Y+12	; 0x0c
    1058:	32 ff       	sbrs	r19, 2
    105a:	17 c0       	rjmp	.+46     	; 0x108a <vfprintf+0x354>
    105c:	31 fd       	sbrc	r19, 1
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <vfprintf+0x330>
    1060:	88 e7       	ldi	r24, 0x78	; 120
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0x334>
    1066:	88 e5       	ldi	r24, 0x58	; 88
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	b7 01       	movw	r22, r14
    106c:	0c c0       	rjmp	.+24     	; 0x1086 <vfprintf+0x350>
    106e:	83 2f       	mov	r24, r19
    1070:	86 78       	andi	r24, 0x86	; 134
    1072:	59 f0       	breq	.+22     	; 0x108a <vfprintf+0x354>
    1074:	31 ff       	sbrs	r19, 1
    1076:	02 c0       	rjmp	.+4      	; 0x107c <vfprintf+0x346>
    1078:	8b e2       	ldi	r24, 0x2B	; 43
    107a:	01 c0       	rjmp	.+2      	; 0x107e <vfprintf+0x348>
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	37 fd       	sbrc	r19, 7
    1080:	8d e2       	ldi	r24, 0x2D	; 45
    1082:	b7 01       	movw	r22, r14
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
    108a:	a5 14       	cp	r10, r5
    108c:	38 f4       	brcc	.+14     	; 0x109c <vfprintf+0x366>
    108e:	b7 01       	movw	r22, r14
    1090:	80 e3       	ldi	r24, 0x30	; 48
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
    1098:	5a 94       	dec	r5
    109a:	f7 cf       	rjmp	.-18     	; 0x108a <vfprintf+0x354>
    109c:	aa 94       	dec	r10
    109e:	f4 01       	movw	r30, r8
    10a0:	ea 0d       	add	r30, r10
    10a2:	f1 1d       	adc	r31, r1
    10a4:	80 81       	ld	r24, Z
    10a6:	b7 01       	movw	r22, r14
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
    10ae:	a1 10       	cpse	r10, r1
    10b0:	f5 cf       	rjmp	.-22     	; 0x109c <vfprintf+0x366>
    10b2:	33 20       	and	r3, r3
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <vfprintf+0x382>
    10b6:	51 ce       	rjmp	.-862    	; 0xd5a <vfprintf+0x24>
    10b8:	b7 01       	movw	r22, r14
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 83 08 	call	0x1106	; 0x1106 <fputc>
    10c2:	3a 94       	dec	r3
    10c4:	f6 cf       	rjmp	.-20     	; 0x10b2 <vfprintf+0x37c>
    10c6:	f7 01       	movw	r30, r14
    10c8:	86 81       	ldd	r24, Z+6	; 0x06
    10ca:	97 81       	ldd	r25, Z+7	; 0x07
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0x39c>
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	9f ef       	ldi	r25, 0xFF	; 255
    10d2:	2c 96       	adiw	r28, 0x0c	; 12
    10d4:	e2 e1       	ldi	r30, 0x12	; 18
    10d6:	0c 94 35 09 	jmp	0x126a	; 0x126a <__epilogue_restores__>

000010da <strnlen_P>:
    10da:	fc 01       	movw	r30, r24
    10dc:	05 90       	lpm	r0, Z+
    10de:	61 50       	subi	r22, 0x01	; 1
    10e0:	70 40       	sbci	r23, 0x00	; 0
    10e2:	01 10       	cpse	r0, r1
    10e4:	d8 f7       	brcc	.-10     	; 0x10dc <strnlen_P+0x2>
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	8e 0f       	add	r24, r30
    10ec:	9f 1f       	adc	r25, r31
    10ee:	08 95       	ret

000010f0 <strnlen>:
    10f0:	fc 01       	movw	r30, r24
    10f2:	61 50       	subi	r22, 0x01	; 1
    10f4:	70 40       	sbci	r23, 0x00	; 0
    10f6:	01 90       	ld	r0, Z+
    10f8:	01 10       	cpse	r0, r1
    10fa:	d8 f7       	brcc	.-10     	; 0x10f2 <strnlen+0x2>
    10fc:	80 95       	com	r24
    10fe:	90 95       	com	r25
    1100:	8e 0f       	add	r24, r30
    1102:	9f 1f       	adc	r25, r31
    1104:	08 95       	ret

00001106 <fputc>:
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	fb 01       	movw	r30, r22
    1110:	23 81       	ldd	r18, Z+3	; 0x03
    1112:	21 fd       	sbrc	r18, 1
    1114:	03 c0       	rjmp	.+6      	; 0x111c <fputc+0x16>
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	9f ef       	ldi	r25, 0xFF	; 255
    111a:	28 c0       	rjmp	.+80     	; 0x116c <fputc+0x66>
    111c:	22 ff       	sbrs	r18, 2
    111e:	16 c0       	rjmp	.+44     	; 0x114c <fputc+0x46>
    1120:	46 81       	ldd	r20, Z+6	; 0x06
    1122:	57 81       	ldd	r21, Z+7	; 0x07
    1124:	24 81       	ldd	r18, Z+4	; 0x04
    1126:	35 81       	ldd	r19, Z+5	; 0x05
    1128:	42 17       	cp	r20, r18
    112a:	53 07       	cpc	r21, r19
    112c:	44 f4       	brge	.+16     	; 0x113e <fputc+0x38>
    112e:	a0 81       	ld	r26, Z
    1130:	b1 81       	ldd	r27, Z+1	; 0x01
    1132:	9d 01       	movw	r18, r26
    1134:	2f 5f       	subi	r18, 0xFF	; 255
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	31 83       	std	Z+1, r19	; 0x01
    113a:	20 83       	st	Z, r18
    113c:	8c 93       	st	X, r24
    113e:	26 81       	ldd	r18, Z+6	; 0x06
    1140:	37 81       	ldd	r19, Z+7	; 0x07
    1142:	2f 5f       	subi	r18, 0xFF	; 255
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	37 83       	std	Z+7, r19	; 0x07
    1148:	26 83       	std	Z+6, r18	; 0x06
    114a:	10 c0       	rjmp	.+32     	; 0x116c <fputc+0x66>
    114c:	eb 01       	movw	r28, r22
    114e:	09 2f       	mov	r16, r25
    1150:	18 2f       	mov	r17, r24
    1152:	00 84       	ldd	r0, Z+8	; 0x08
    1154:	f1 85       	ldd	r31, Z+9	; 0x09
    1156:	e0 2d       	mov	r30, r0
    1158:	09 95       	icall
    115a:	89 2b       	or	r24, r25
    115c:	e1 f6       	brne	.-72     	; 0x1116 <fputc+0x10>
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	9f 83       	std	Y+7, r25	; 0x07
    1166:	8e 83       	std	Y+6, r24	; 0x06
    1168:	81 2f       	mov	r24, r17
    116a:	90 2f       	mov	r25, r16
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <__ultoa_invert>:
    1176:	fa 01       	movw	r30, r20
    1178:	aa 27       	eor	r26, r26
    117a:	28 30       	cpi	r18, 0x08	; 8
    117c:	51 f1       	breq	.+84     	; 0x11d2 <__ultoa_invert+0x5c>
    117e:	20 31       	cpi	r18, 0x10	; 16
    1180:	81 f1       	breq	.+96     	; 0x11e2 <__ultoa_invert+0x6c>
    1182:	e8 94       	clt
    1184:	6f 93       	push	r22
    1186:	6e 7f       	andi	r22, 0xFE	; 254
    1188:	6e 5f       	subi	r22, 0xFE	; 254
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	af 4f       	sbci	r26, 0xFF	; 255
    1192:	b1 e0       	ldi	r27, 0x01	; 1
    1194:	3e d0       	rcall	.+124    	; 0x1212 <__ultoa_invert+0x9c>
    1196:	b4 e0       	ldi	r27, 0x04	; 4
    1198:	3c d0       	rcall	.+120    	; 0x1212 <__ultoa_invert+0x9c>
    119a:	67 0f       	add	r22, r23
    119c:	78 1f       	adc	r23, r24
    119e:	89 1f       	adc	r24, r25
    11a0:	9a 1f       	adc	r25, r26
    11a2:	a1 1d       	adc	r26, r1
    11a4:	68 0f       	add	r22, r24
    11a6:	79 1f       	adc	r23, r25
    11a8:	8a 1f       	adc	r24, r26
    11aa:	91 1d       	adc	r25, r1
    11ac:	a1 1d       	adc	r26, r1
    11ae:	6a 0f       	add	r22, r26
    11b0:	71 1d       	adc	r23, r1
    11b2:	81 1d       	adc	r24, r1
    11b4:	91 1d       	adc	r25, r1
    11b6:	a1 1d       	adc	r26, r1
    11b8:	20 d0       	rcall	.+64     	; 0x11fa <__ultoa_invert+0x84>
    11ba:	09 f4       	brne	.+2      	; 0x11be <__ultoa_invert+0x48>
    11bc:	68 94       	set
    11be:	3f 91       	pop	r19
    11c0:	2a e0       	ldi	r18, 0x0A	; 10
    11c2:	26 9f       	mul	r18, r22
    11c4:	11 24       	eor	r1, r1
    11c6:	30 19       	sub	r19, r0
    11c8:	30 5d       	subi	r19, 0xD0	; 208
    11ca:	31 93       	st	Z+, r19
    11cc:	de f6       	brtc	.-74     	; 0x1184 <__ultoa_invert+0xe>
    11ce:	cf 01       	movw	r24, r30
    11d0:	08 95       	ret
    11d2:	46 2f       	mov	r20, r22
    11d4:	47 70       	andi	r20, 0x07	; 7
    11d6:	40 5d       	subi	r20, 0xD0	; 208
    11d8:	41 93       	st	Z+, r20
    11da:	b3 e0       	ldi	r27, 0x03	; 3
    11dc:	0f d0       	rcall	.+30     	; 0x11fc <__ultoa_invert+0x86>
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__ultoa_invert+0x5c>
    11e0:	f6 cf       	rjmp	.-20     	; 0x11ce <__ultoa_invert+0x58>
    11e2:	46 2f       	mov	r20, r22
    11e4:	4f 70       	andi	r20, 0x0F	; 15
    11e6:	40 5d       	subi	r20, 0xD0	; 208
    11e8:	4a 33       	cpi	r20, 0x3A	; 58
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <__ultoa_invert+0x7c>
    11ec:	49 5d       	subi	r20, 0xD9	; 217
    11ee:	31 fd       	sbrc	r19, 1
    11f0:	40 52       	subi	r20, 0x20	; 32
    11f2:	41 93       	st	Z+, r20
    11f4:	02 d0       	rcall	.+4      	; 0x11fa <__ultoa_invert+0x84>
    11f6:	a9 f7       	brne	.-22     	; 0x11e2 <__ultoa_invert+0x6c>
    11f8:	ea cf       	rjmp	.-44     	; 0x11ce <__ultoa_invert+0x58>
    11fa:	b4 e0       	ldi	r27, 0x04	; 4
    11fc:	a6 95       	lsr	r26
    11fe:	97 95       	ror	r25
    1200:	87 95       	ror	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	ba 95       	dec	r27
    1208:	c9 f7       	brne	.-14     	; 0x11fc <__ultoa_invert+0x86>
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	61 05       	cpc	r22, r1
    120e:	71 05       	cpc	r23, r1
    1210:	08 95       	ret
    1212:	9b 01       	movw	r18, r22
    1214:	ac 01       	movw	r20, r24
    1216:	0a 2e       	mov	r0, r26
    1218:	06 94       	lsr	r0
    121a:	57 95       	ror	r21
    121c:	47 95       	ror	r20
    121e:	37 95       	ror	r19
    1220:	27 95       	ror	r18
    1222:	ba 95       	dec	r27
    1224:	c9 f7       	brne	.-14     	; 0x1218 <__ultoa_invert+0xa2>
    1226:	62 0f       	add	r22, r18
    1228:	73 1f       	adc	r23, r19
    122a:	84 1f       	adc	r24, r20
    122c:	95 1f       	adc	r25, r21
    122e:	a0 1d       	adc	r26, r0
    1230:	08 95       	ret

00001232 <__prologue_saves__>:
    1232:	2f 92       	push	r2
    1234:	3f 92       	push	r3
    1236:	4f 92       	push	r4
    1238:	5f 92       	push	r5
    123a:	6f 92       	push	r6
    123c:	7f 92       	push	r7
    123e:	8f 92       	push	r8
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	ca 1b       	sub	r28, r26
    125c:	db 0b       	sbc	r29, r27
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	09 94       	ijmp

0000126a <__epilogue_restores__>:
    126a:	2a 88       	ldd	r2, Y+18	; 0x12
    126c:	39 88       	ldd	r3, Y+17	; 0x11
    126e:	48 88       	ldd	r4, Y+16	; 0x10
    1270:	5f 84       	ldd	r5, Y+15	; 0x0f
    1272:	6e 84       	ldd	r6, Y+14	; 0x0e
    1274:	7d 84       	ldd	r7, Y+13	; 0x0d
    1276:	8c 84       	ldd	r8, Y+12	; 0x0c
    1278:	9b 84       	ldd	r9, Y+11	; 0x0b
    127a:	aa 84       	ldd	r10, Y+10	; 0x0a
    127c:	b9 84       	ldd	r11, Y+9	; 0x09
    127e:	c8 84       	ldd	r12, Y+8	; 0x08
    1280:	df 80       	ldd	r13, Y+7	; 0x07
    1282:	ee 80       	ldd	r14, Y+6	; 0x06
    1284:	fd 80       	ldd	r15, Y+5	; 0x05
    1286:	0c 81       	ldd	r16, Y+4	; 0x04
    1288:	1b 81       	ldd	r17, Y+3	; 0x03
    128a:	aa 81       	ldd	r26, Y+2	; 0x02
    128c:	b9 81       	ldd	r27, Y+1	; 0x01
    128e:	ce 0f       	add	r28, r30
    1290:	d1 1d       	adc	r29, r1
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	ed 01       	movw	r28, r26
    129e:	08 95       	ret

000012a0 <_exit>:
    12a0:	f8 94       	cli

000012a2 <__stop_program>:
    12a2:	ff cf       	rjmp	.-2      	; 0x12a2 <__stop_program>
