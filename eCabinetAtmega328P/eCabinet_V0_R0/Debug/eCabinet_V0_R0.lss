
eCabinet_V0_R0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000612  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800712  00800712  00001388  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021f8  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff7  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010db  00000000  00000000  000048ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00005988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000098e  00000000  00000000  00005dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3c  00000000  00000000  0000677a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000073b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b7 e0       	ldi	r27, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  9e:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
 *  Author: Fran
 */ 
#include "includes.h"

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
  b0:	ac e7       	ldi	r26, 0x7C	; 124
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <pin_manager>:
}

void pin_manager(void)
{	
	// Configure UART's pins
	DDRD |=(1<<PIND1);//Digital output TX USART
  c8:	51 9a       	sbi	0x0a, 1	; 10
	DDRD |=(0<<PIND2);//Digital input INT0
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	8a b9       	out	0x0a, r24	; 10
	//DDRB |=(1<<PINB0);//Digital output IO8 turn on GLCD
	DDRB |=(1<<PINB1);//Digital output IO9 turn on Yelow LEd
  ce:	21 9a       	sbi	0x04, 1	; 4
	//CONFIGURATION SDA & SCL PIN of I2C protocol in PORT C
	//Note that is not necessary configure de DDRC´s pin corresponding 
	
	PORTC=0b00110000;// Pin 4 & 5 PULL UP TO I2C PROTOCOL
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	08 95       	ret

000000d6 <initial_configuration>:
#include "includes.h"


void initial_configuration (void)
{
	pin_manager();
  d6:	0e 94 64 00 	call	0xc8	; 0xc8 <pin_manager>
	USART_Init(BAUD_PRESCALE);	
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 4c 03 	call	0x698	; 0x698 <USART_Init>
	i2c_init();	
  e2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <i2c_init>
	adc_init();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	INT0_enable();
  ea:	0e 94 a7 00 	call	0x14e	; 0x14e <INT0_enable>
  ee:	08 95       	ret

000000f0 <eCabinetsendCommand_GPIOExpander>:
#include "includes.h"

//#define Signal_WDT() eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank2, WDT_IN)

void eCabinetsendCommand_GPIOExpander(uint8_t address, uint8_t register_definition, uint8_t IO)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	d6 2f       	mov	r29, r22
  f6:	c4 2f       	mov	r28, r20
	i2c_start(address);
  f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <i2c_start>
	i2c_write(register_definition);
  fc:	8d 2f       	mov	r24, r29
  fe:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_write(IO);
 102:	8c 2f       	mov	r24, r28
 104:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_stop();
 108:	0e 94 41 02 	call	0x482	; 0x482 <i2c_stop>
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <eCabinet_getADC>:


/***** Link information for function: https://www.tutorialspoint.com/cprogramming/c_return_arrays_from_function.htm *****/

int * eCabinet_getADC(uint8_t address, uint8_t channel)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	c8 2f       	mov	r28, r24
	static int r[2];
	i2c_start(address<<1);
 118:	88 0f       	add	r24, r24
 11a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <i2c_start>
	i2c_write(0x84);// Command: single ended, channel 0, internal reference off and A/D converter ON
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_start(address);// Repeat start condition
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 fd 01 	call	0x3fa	; 0x3fa <i2c_start>
	for (int i=0;i<2;i++)
	{r[i]=i2c_readAck();}
 12a:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_readAck>
 12e:	c2 e1       	ldi	r28, 0x12	; 18
 130:	d7 e0       	ldi	r29, 0x07	; 7
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	99 83       	std	Y+1, r25	; 0x01
 136:	88 83       	st	Y, r24
 138:	0e 94 36 02 	call	0x46c	; 0x46c <i2c_readAck>
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9b 83       	std	Y+3, r25	; 0x03
 140:	8a 83       	std	Y+2, r24	; 0x02
	i2c_stop();
 142:	0e 94 41 02 	call	0x482	; 0x482 <i2c_stop>
	return r;
}
 146:	ce 01       	movw	r24, r28
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <INT0_enable>:
 */ 
#include "includes.h"

void INT0_enable (void)
{
	EICRA |=(1<<ISC01);
 14e:	e9 e6       	ldi	r30, 0x69	; 105
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
	EICRA |=(0<<ISC00);//The falling edge of INT0 generates an interrupt request.
 158:	80 81       	ld	r24, Z
 15a:	80 83       	st	Z, r24
	EIMSK |=(1<<INT0);	
 15c:	e8 9a       	sbi	0x1d, 0	; 29
 15e:	08 95       	ret

00000160 <__vector_1>:


//itoa(adc_value, buffer, 10);        //Convert the read value to an ascii string

ISR(INT0_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
	EIFR |= (1<< INTF0);//Flag interrupt reset
 16a:	e0 9a       	sbi	0x1c, 0	; 28
	//Here the code	
}
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_11>:
	
}*/

/***** TIMER1 COMPA *******/
ISR(TIMER1_COMPA_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
	new_event_timer=1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <new_event_timer>
	count_timer++;			
 188:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <count_timer>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <count_timer>
}
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:
int main(void)
{
	enum bool {false, true};
	enum bool myFlag=false;
	
	initial_configuration();//Pin manager; USART_init; I2C_init
 19e:	0e 94 6b 00 	call	0xd6	; 0xd6 <initial_configuration>
	lcd_init();// Set of configuration commands
 1a2:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_init>
	test_1();// Display picture during 2 seconds
 1a6:	0e 94 6f 03 	call	0x6de	; 0x6de <test_1>
	test_2();// Send through USART "Hello my friend"
 1aa:	0e 94 87 03 	call	0x70e	; 0x70e <test_2>
	test_3(10,1);//Send to lcd "Running: "
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	0e 94 8c 03 	call	0x718	; 0x718 <test_3>
	sprintf(mensaje, "%i", count_timer);	
 1b6:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <count_timer>
 1ba:	1f 92       	push	r1
 1bc:	8f 93       	push	r24
 1be:	85 ee       	ldi	r24, 0xE5	; 229
 1c0:	96 e0       	ldi	r25, 0x06	; 6
 1c2:	9f 93       	push	r25
 1c4:	8f 93       	push	r24
 1c6:	ca e1       	ldi	r28, 0x1A	; 26
 1c8:	d7 e0       	ldi	r29, 0x07	; 7
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	0e 94 97 03 	call	0x72e	; 0x72e <sprintf>
	lcd_draw_string(50,1, mensaje, buffer);//Charge buffer with string
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	ae 01       	movw	r20, r28
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	82 e3       	ldi	r24, 0x32	; 50
 1dc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_draw_string>
	drawBuffer(buffer);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 17 03 	call	0x62e	; 0x62e <drawBuffer>
	
	sei();//Set enable interrupt	
 1e8:	78 94       	sei
	TIMER1_enable();
 1ea:	0e 94 33 03 	call	0x666	; 0x666 <TIMER1_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	ef e9       	ldi	r30, 0x9F	; 159
 1f0:	ff e0       	ldi	r31, 0x0F	; 15
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x54>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x5a>
 1f8:	00 00       	nop
	_delay_ms(1);
	/******* GPIO Expanders configuration******/
	eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, IORegisterBank0Address, IOConf_Bank0_Exp1);//Configure IO pins of Bank0 GPIOExpander_1
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	68 e1       	ldi	r22, 0x18	; 24
 1fe:	84 e4       	ldi	r24, 0x44	; 68
 200:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, IORegisterBank1Address, IOConf_Bank1_Exp1);//Configure IO pins of Bank1 GPIOExpander_1
 204:	43 ef       	ldi	r20, 0xF3	; 243
 206:	69 e1       	ldi	r22, 0x19	; 25
 208:	84 e4       	ldi	r24, 0x44	; 68
 20a:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, IORegisterBank2Address, IOConf_Bank2_Exp1);//Configure IO pins of Bank2 GPIOExpander_1
 20e:	46 e0       	ldi	r20, 0x06	; 6
 210:	6a e1       	ldi	r22, 0x1A	; 26
 212:	84 e4       	ldi	r24, 0x44	; 68
 214:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, IORegisterBank0Address, IOConf_Bank0_Exp2);//Configure IO pins of Bank0 GPIOExpander_2
 218:	48 ea       	ldi	r20, 0xA8	; 168
 21a:	68 e1       	ldi	r22, 0x18	; 24
 21c:	86 e4       	ldi	r24, 0x46	; 70
 21e:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, IORegisterBank1Address, IOConf_Bank1_Exp2);//Configure IO pins of Bank1 GPIOExpander_2
 222:	43 e0       	ldi	r20, 0x03	; 3
 224:	69 e1       	ldi	r22, 0x19	; 25
 226:	86 e4       	ldi	r24, 0x46	; 70
 228:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, IORegisterBank2Address, IOConf_Bank2_Exp2);//Configure IO pins of Bank0 GPIOExpander_2
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	6a e1       	ldi	r22, 0x1A	; 26
 230:	86 e4       	ldi	r24, 0x46	; 70
 232:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank0Address, IOConf_Bank0_Exp3);//Configure IO pins of Bank0 GPIOExpander_3
 236:	45 e5       	ldi	r20, 0x55	; 85
 238:	68 e1       	ldi	r22, 0x18	; 24
 23a:	8c e4       	ldi	r24, 0x4C	; 76
 23c:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank1Address, IOConf_Bank1_Exp3);//Configure IO pins of Bank1 GPIOExpander_3
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	69 e1       	ldi	r22, 0x19	; 25
 244:	8c e4       	ldi	r24, 0x4C	; 76
 246:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander3Address, IORegisterBank2Address, IOConf_Bank2_Exp3);//Configure IO pins of Bank0 GPIOExpander_3
 24a:	48 ea       	ldi	r20, 0xA8	; 168
 24c:	6a e1       	ldi	r22, 0x1A	; 26
 24e:	8c e4       	ldi	r24, 0x4C	; 76
 250:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>

	sprintf(mensaje, "B0_Exp2:%x", DataBank0GPIOExpander_2);
 254:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <DataBank0GPIOExpander_2>
 258:	1f 92       	push	r1
 25a:	8f 93       	push	r24
 25c:	88 ee       	ldi	r24, 0xE8	; 232
 25e:	96 e0       	ldi	r25, 0x06	; 6
 260:	9f 93       	push	r25
 262:	8f 93       	push	r24
 264:	df 93       	push	r29
 266:	cf 93       	push	r28
 268:	0e 94 97 03 	call	0x72e	; 0x72e <sprintf>
	lcd_draw_string(10,2, mensaje, buffer);//Charge buffer with string
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	31 e0       	ldi	r19, 0x01	; 1
 270:	ae 01       	movw	r20, r28
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	8a e0       	ldi	r24, 0x0A	; 10
 276:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_draw_string>
	drawBuffer(buffer);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 17 03 	call	0x62e	; 0x62e <drawBuffer>
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	99 e6       	ldi	r25, 0x69	; 105
 286:	e8 e1       	ldi	r30, 0x18	; 24
 288:	81 50       	subi	r24, 0x01	; 1
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e0 40       	sbci	r30, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0xea>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0xf4>
 292:	00 00       	nop
	_delay_ms(500);
	
	/****** RESET outputs or defaults values *****/
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 |= 0xFF );//Switch off both PSU2 outputs.
 294:	cf ef       	ldi	r28, 0xFF	; 255
 296:	c0 93 16 07 	sts	0x0716, r28	; 0x800716 <DataBank0GPIOExpander_2>
 29a:	4f ef       	ldi	r20, 0xFF	; 255
 29c:	68 e0       	ldi	r22, 0x08	; 8
 29e:	86 e4       	ldi	r24, 0x46	; 70
 2a0:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
	eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank0, DataBank0GPIOExpander_1 |= 0xFF );//Switch off both Leds 1&2.
 2a4:	c0 93 17 07 	sts	0x0717, r28	; 0x800717 <DataBank0GPIOExpander_1>
 2a8:	4f ef       	ldi	r20, 0xFF	; 255
 2aa:	68 e0       	ldi	r22, 0x08	; 8
 2ac:	84 e4       	ldi	r24, 0x44	; 68
 2ae:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
 2b2:	ff ef       	ldi	r31, 0xFF	; 255
 2b4:	23 ec       	ldi	r18, 0xC3	; 195
 2b6:	89 e0       	ldi	r24, 0x09	; 9
 2b8:	f1 50       	subi	r31, 0x01	; 1
 2ba:	20 40       	sbci	r18, 0x00	; 0
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x11a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x124>
 2c2:	00 00       	nop
	
	
	_delay_ms(200);
	
	/*****Configure output registers *****/
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 &= (PSU_2_2SWITCHON & PSU_2_1SWITCHON));//Switch on both PSU
 2c4:	40 91 16 07 	lds	r20, 0x0716	; 0x800716 <DataBank0GPIOExpander_2>
 2c8:	4f 7a       	andi	r20, 0xAF	; 175
 2ca:	40 93 16 07 	sts	0x0716, r20	; 0x800716 <DataBank0GPIOExpander_2>
 2ce:	68 e0       	ldi	r22, 0x08	; 8
 2d0:	86 e4       	ldi	r24, 0x46	; 70
 2d2:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	e3 ec       	ldi	r30, 0xC3	; 195
 2da:	f9 e0       	ldi	r31, 0x09	; 9
 2dc:	91 50       	subi	r25, 0x01	; 1
 2de:	e0 40       	sbci	r30, 0x00	; 0
 2e0:	f0 40       	sbci	r31, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x13e>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x148>
 2e6:	00 00       	nop
 	_delay_ms(200);
 	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 |= (~ PSU_2_2SWITCHON | ~ PSU_2_1SWITCHON) );//Switch off this PSU
 2e8:	40 91 16 07 	lds	r20, 0x0716	; 0x800716 <DataBank0GPIOExpander_2>
 2ec:	40 65       	ori	r20, 0x50	; 80
 2ee:	40 93 16 07 	sts	0x0716, r20	; 0x800716 <DataBank0GPIOExpander_2>
 2f2:	68 e0       	ldi	r22, 0x08	; 8
 2f4:	86 e4       	ldi	r24, 0x46	; 70
 2f6:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	83 ec       	ldi	r24, 0xC3	; 195
 2fe:	99 e0       	ldi	r25, 0x09	; 9
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x162>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x16c>
 30a:	00 00       	nop
	_delay_ms(200);
	eCabinetsendCommand_GPIOExpander(GPIOExpander2Address, OutputPortRegisterBank0, DataBank0GPIOExpander_2 &= (PSU_2_2SWITCHON & PSU_2_1SWITCHON));//Switch on both PSU
 30c:	40 91 16 07 	lds	r20, 0x0716	; 0x800716 <DataBank0GPIOExpander_2>
 310:	4f 7a       	andi	r20, 0xAF	; 175
 312:	40 93 16 07 	sts	0x0716, r20	; 0x800716 <DataBank0GPIOExpander_2>
 316:	68 e0       	ldi	r22, 0x08	; 8
 318:	86 e4       	ldi	r24, 0x46	; 70
 31a:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
 31e:	ed b7       	in	r30, 0x3d	; 61
 320:	fe b7       	in	r31, 0x3e	; 62
 322:	3c 96       	adiw	r30, 0x0c	; 12
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	fe bf       	out	0x3e, r31	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	ed bf       	out	0x3d, r30	; 61
			eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank0, DataBank0GPIOExpander_1 |= ~LED0);//Configure IO pins of Bank2 GPIOExpander_1
			
			new_event_timer=0;
			
			p=eCabinet_getADC(ADCAddress,0);// Currently Channel is not a parameter
			sprintf(mensaje, "%d", *p);
 32e:	03 ef       	ldi	r16, 0xF3	; 243
 330:	16 e0       	ldi	r17, 0x06	; 6
 332:	ca e1       	ldi	r28, 0x1A	; 26
 334:	d7 e0       	ldi	r29, 0x07	; 7
	
	
    while(1)
	{		
		
		if (new_event_timer)//Currently wait 100 seconds until begin to resets each 2 seconds,but is a new data is write in output register it doesn' wait the 100 seconds only 2
 336:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <new_event_timer>
 33a:	88 23       	and	r24, r24
 33c:	09 f4       	brne	.+2      	; 0x340 <main+0x1a2>
 33e:	51 c0       	rjmp	.+162    	; 0x3e2 <main+0x244>
		{
			/*Generate a short pulse in WDT_In signal to avoid a WDT time_out*/
			eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank2, WDT_IN_CONF| WDT_IN);
 340:	41 e1       	ldi	r20, 0x11	; 17
 342:	6a e0       	ldi	r22, 0x0A	; 10
 344:	84 e4       	ldi	r24, 0x44	; 68
 346:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
			eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank2, WDT_IN_CONF);
 34a:	40 e1       	ldi	r20, 0x10	; 16
 34c:	6a e0       	ldi	r22, 0x0A	; 10
 34e:	84 e4       	ldi	r24, 0x44	; 68
 350:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
			
			/****** Activity led0 & Led 1 *****/
 			eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank0, DataBank0GPIOExpander_1 &= LED0);//Configure IO pins of Bank2 GPIOExpander_1
 354:	40 91 17 07 	lds	r20, 0x0717	; 0x800717 <DataBank0GPIOExpander_1>
 358:	4f 7b       	andi	r20, 0xBF	; 191
 35a:	40 93 17 07 	sts	0x0717, r20	; 0x800717 <DataBank0GPIOExpander_1>
 35e:	68 e0       	ldi	r22, 0x08	; 8
 360:	84 e4       	ldi	r24, 0x44	; 68
 362:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
 366:	ff ef       	ldi	r31, 0xFF	; 255
 368:	21 ee       	ldi	r18, 0xE1	; 225
 36a:	84 e0       	ldi	r24, 0x04	; 4
 36c:	f1 50       	subi	r31, 0x01	; 1
 36e:	20 40       	sbci	r18, 0x00	; 0
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x1ce>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x1d8>
 376:	00 00       	nop
			_delay_ms(100);
			eCabinetsendCommand_GPIOExpander(GPIOExpander1Address, OutputPortRegisterBank0, DataBank0GPIOExpander_1 |= ~LED0);//Configure IO pins of Bank2 GPIOExpander_1
 378:	40 91 17 07 	lds	r20, 0x0717	; 0x800717 <DataBank0GPIOExpander_1>
 37c:	40 64       	ori	r20, 0x40	; 64
 37e:	40 93 17 07 	sts	0x0717, r20	; 0x800717 <DataBank0GPIOExpander_1>
 382:	68 e0       	ldi	r22, 0x08	; 8
 384:	84 e4       	ldi	r24, 0x44	; 68
 386:	0e 94 78 00 	call	0xf0	; 0xf0 <eCabinetsendCommand_GPIOExpander>
			
			new_event_timer=0;
 38a:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <new_event_timer>
			
			p=eCabinet_getADC(ADCAddress,0);// Currently Channel is not a parameter
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	8a e4       	ldi	r24, 0x4A	; 74
 392:	0e 94 89 00 	call	0x112	; 0x112 <eCabinet_getADC>
 396:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <p+0x1>
 39a:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <p>
			sprintf(mensaje, "%d", *p);
 39e:	fc 01       	movw	r30, r24
 3a0:	21 81       	ldd	r18, Z+1	; 0x01
 3a2:	2f 93       	push	r18
 3a4:	80 81       	ld	r24, Z
 3a6:	8f 93       	push	r24
 3a8:	1f 93       	push	r17
 3aa:	0f 93       	push	r16
 3ac:	df 93       	push	r29
 3ae:	cf 93       	push	r28
 3b0:	0e 94 97 03 	call	0x72e	; 0x72e <sprintf>
			lcd_draw_string(50,1, mensaje, buffer);//Charge buffer with string
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	31 e0       	ldi	r19, 0x01	; 1
 3b8:	ae 01       	movw	r20, r28
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	82 e3       	ldi	r24, 0x32	; 50
 3be:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_draw_string>
			drawBuffer(buffer);			
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 17 03 	call	0x62e	; 0x62e <drawBuffer>
			if (count_timer==255)
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <count_timer>
 3da:	8f 3f       	cpi	r24, 0xFF	; 255
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <main+0x244>
			{ count_timer=0;}
 3de:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <count_timer>
				
			
		}// end if (new_event_timer)
		
		NOP();
 3e2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <NOP>
			
    } // end while
 3e6:	a7 cf       	rjmp	.-178    	; 0x336 <main+0x198>

000003e8 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	
    return TWDR;

}/* i2c_readNak */
 3e8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3ec:	80 e3       	ldi	r24, 0x30	; 48
 3ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 3f2:	84 e0       	ldi	r24, 0x04	; 4
 3f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3f8:	08 95       	ret

000003fa <i2c_start>:
 3fa:	94 ea       	ldi	r25, 0xA4	; 164
 3fc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 400:	ec eb       	ldi	r30, 0xBC	; 188
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	90 81       	ld	r25, Z
 406:	99 23       	and	r25, r25
 408:	ec f7       	brge	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 40e:	98 7f       	andi	r25, 0xF8	; 248
 410:	98 30       	cpi	r25, 0x08	; 8
 412:	11 f0       	breq	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	90 31       	cpi	r25, 0x10	; 16
 416:	a1 f4       	brne	.+40     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 418:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 41c:	84 e8       	ldi	r24, 0x84	; 132
 41e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 422:	ec eb       	ldi	r30, 0xBC	; 188
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	88 23       	and	r24, r24
 42a:	ec f7       	brge	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 430:	98 7f       	andi	r25, 0xF8	; 248
 432:	98 31       	cpi	r25, 0x18	; 24
 434:	39 f0       	breq	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 34       	cpi	r25, 0x40	; 64
 43a:	29 f4       	brne	.+10     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	08 95       	ret

00000448 <i2c_write>:
 448:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 44c:	84 e8       	ldi	r24, 0x84	; 132
 44e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 452:	ec eb       	ldi	r30, 0xBC	; 188
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	88 23       	and	r24, r24
 45a:	ec f7       	brge	.-6      	; 0x456 <i2c_write+0xe>
 45c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 460:	98 7f       	andi	r25, 0xF8	; 248
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	98 32       	cpi	r25, 0x28	; 40
 466:	09 f4       	brne	.+2      	; 0x46a <i2c_write+0x22>
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret

0000046c <i2c_readAck>:
 46c:	84 ec       	ldi	r24, 0xC4	; 196
 46e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 472:	ec eb       	ldi	r30, 0xBC	; 188
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	88 23       	and	r24, r24
 47a:	ec f7       	brge	.-6      	; 0x476 <i2c_readAck+0xa>
 47c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 480:	08 95       	ret

00000482 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 482:	84 e9       	ldi	r24, 0x94	; 148
 484:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 488:	08 95       	ret

0000048a <clearBuffer>:
	//memset(buff, 0, 1024);
	for (uint16_t i= 0;i<1024;i++)
	{
		buffer[i]=0x00;
	}
}
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	34 e0       	ldi	r19, 0x04	; 4
 48e:	fc 01       	movw	r30, r24
 490:	a9 01       	movw	r20, r18
 492:	11 92       	st	Z+, r1
 494:	41 50       	subi	r20, 0x01	; 1
 496:	50 40       	sbci	r21, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <clearBuffer+0x8>
 49a:	08 95       	ret

0000049c <lcd_draw_char>:
	
}


void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff)
{
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	fa 01       	movw	r30, r20
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	4e 0f       	add	r20, r30
 4aa:	5f 1f       	adc	r21, r31
 4ac:	fa 01       	movw	r30, r20
 4ae:	e0 5a       	subi	r30, 0xA0	; 160
 4b0:	fb 4f       	sbci	r31, 0xFB	; 251
	uint8_t ascii_offset = 32;
	for(uint8_t i=0; i<5; i++)
	{
		buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	40 e8       	ldi	r20, 0x80	; 128
 4b6:	64 9f       	mul	r22, r20
 4b8:	80 0d       	add	r24, r0
 4ba:	91 1d       	adc	r25, r1
 4bc:	11 24       	eor	r1, r1
 4be:	d9 01       	movw	r26, r18
 4c0:	a8 0f       	add	r26, r24
 4c2:	b9 1f       	adc	r27, r25
 4c4:	05 96       	adiw	r24, 0x05	; 5
 4c6:	28 0f       	add	r18, r24
 4c8:	39 1f       	adc	r19, r25
 4ca:	81 91       	ld	r24, Z+
 4cc:	8d 93       	st	X+, r24


void lcd_draw_char(unsigned char column, unsigned char page, unsigned char letter, uint8_t *buff)
{
	uint8_t ascii_offset = 32;
	for(uint8_t i=0; i<5; i++)
 4ce:	a2 17       	cp	r26, r18
 4d0:	b3 07       	cpc	r27, r19
 4d2:	d9 f7       	brne	.-10     	; 0x4ca <lcd_draw_char+0x2e>
	{
		buff[i+((page*128)+column)] = Ascii_1[letter-ascii_offset][i];
	}
}
 4d4:	08 95       	ret

000004d6 <lcd_draw_string>:

void lcd_draw_string(uint8_t column, uint8_t page, char *string, uint8_t *buff)
{
 4d6:	df 92       	push	r13
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	fa 01       	movw	r30, r20
	uint8_t i = 0;
	while(string[i] != 0)
 4e6:	40 81       	ld	r20, Z
 4e8:	44 23       	and	r20, r20
 4ea:	91 f0       	breq	.+36     	; 0x510 <lcd_draw_string+0x3a>
 4ec:	79 01       	movw	r14, r18
 4ee:	8f 01       	movw	r16, r30
 4f0:	d6 2e       	mov	r13, r22
 4f2:	c8 2f       	mov	r28, r24
 4f4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcd_draw_char(column+(5*i), page, (string[i]), buff);
 4f6:	97 01       	movw	r18, r14
 4f8:	6d 2d       	mov	r22, r13
 4fa:	8c 2f       	mov	r24, r28
 4fc:	0e 94 4e 02 	call	0x49c	; 0x49c <lcd_draw_char>
		i++;
 500:	df 5f       	subi	r29, 0xFF	; 255
}

void lcd_draw_string(uint8_t column, uint8_t page, char *string, uint8_t *buff)
{
	uint8_t i = 0;
	while(string[i] != 0)
 502:	f8 01       	movw	r30, r16
 504:	ed 0f       	add	r30, r29
 506:	f1 1d       	adc	r31, r1
 508:	40 81       	ld	r20, Z
 50a:	cb 5f       	subi	r28, 0xFB	; 251
 50c:	41 11       	cpse	r20, r1
 50e:	f3 cf       	rjmp	.-26     	; 0x4f6 <lcd_draw_string+0x20>
	{
		lcd_draw_char(column+(5*i), page, (string[i]), buff);
		i++;
	}
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	08 95       	ret

00000520 <sendCommand>:
	buffer[pagina*128+x] = nt;
	sendData(buffer[pagina*128+x]);
}

void sendCommand(uint8_t command)
{
 520:	cf 93       	push	r28
 522:	c8 2f       	mov	r28, r24
	i2c_start(SSD1306_DEFAULT_ADDRESS);
 524:	88 e7       	ldi	r24, 0x78	; 120
 526:	0e 94 fd 01 	call	0x3fa	; 0x3fa <i2c_start>
	i2c_write(command_byte);
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_write(command);
 530:	8c 2f       	mov	r24, r28
 532:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_stop();
 536:	0e 94 41 02 	call	0x482	; 0x482 <i2c_stop>
}
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <lcd_init>:
//https://github.com/tibounise/SSD1306-AVR/blob/master/SSD1306.cpp

void lcd_init(void)// Init sequence for 128x64 OLED module
{
	// Turn display off
	sendCommand(SSD1306_DISPLAYOFF);//0XAE
 53e:	8e ea       	ldi	r24, 0xAE	; 174
 540:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	
	
	sendCommand(SSD1306_SETMULTIPLEX);//0XA8
 544:	88 ea       	ldi	r24, 0xA8	; 168
 546:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0X3F);
 54a:	8f e3       	ldi	r24, 0x3F	; 63
 54c:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	sendCommand(SSD1306_SETDISPLAYOFFSET);//0XD3
 550:	83 ed       	ldi	r24, 0xD3	; 211
 552:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0x00);					// no offset
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	//sendCommand_1((SSD1306_SETSTARTLINE | 0x00));//0X40, range from 0x40 to 7F
	sendCommand(SSD1306_SETSTARTLINE);	//0X40
 55c:	80 e4       	ldi	r24, 0x40	; 64
 55e:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	//sendCommand(0x00);					//LINE 0
	
	//sendCommand(SSD1306_SEGREMAP);	//0XA0, two options: 0XA0 | 0XA1
	sendCommand(0XA1);	//0XA1 ESTA ES UNA SEGUNDA OPCION PARA SEGREMAP
 562:	81 ea       	ldi	r24, 0xA1	; 161
 564:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	sendCommand(SSD1306_COMSCANDEC);//0XC8, two options: 0XC0 | 0XC8, ALLOWING LAYOUT FLEXIBILITY IN THE OLED MODULE
 568:	88 ec       	ldi	r24, 0xC8	; 200
 56a:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	//sendCommand(0XC0);
	
	sendCommand(SSD1306_SETCOMPINS);	//0XDA
 56e:	8a ed       	ldi	r24, 0xDA	; 218
 570:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0x12);					//
 574:	82 e1       	ldi	r24, 0x12	; 18
 576:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	sendCommand(SSD1306_SETCONTRAST);//0X81
 57a:	81 e8       	ldi	r24, 0x81	; 129
 57c:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0xCF);
 580:	8f ec       	ldi	r24, 0xCF	; 207
 582:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	sendCommand(SSD1306_DISPLAYALLON_RESUME);	//0XA4
 586:	84 ea       	ldi	r24, 0xA4	; 164
 588:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	sendCommand(SSD1306_NORMALDISPLAY);	//0XA6 IF INVERTER CHARGE 0XA7
 58c:	86 ea       	ldi	r24, 0xA6	; 166
 58e:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	//sendCommand(0XA7);
	
	sendCommand(SSD1306_SETDISPLAYCLOCKDIV);//0XD5
 592:	85 ed       	ldi	r24, 0xD5	; 213
 594:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0x80);						// the suggested ratio 0x80
 598:	80 e8       	ldi	r24, 0x80	; 128
 59a:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>

	sendCommand(SSD1306_CHARGEPUMP);	//0X8D	Charge pump Setting
 59e:	8d e8       	ldi	r24, 0x8D	; 141
 5a0:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0x14);					// Enable charge pump
 5a4:	84 e1       	ldi	r24, 0x14	; 20
 5a6:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	sendCommand(SSD1306_MEMORYMODE);	//0X20
 5aa:	80 e2       	ldi	r24, 0x20	; 32
 5ac:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0x00);					//Horizontal address mode
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	
	
	sendCommand(SSD1306_SETPRECHARGE);//0XD9
 5b6:	89 ed       	ldi	r24, 0xD9	; 217
 5b8:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0xF1);
 5bc:	81 ef       	ldi	r24, 0xF1	; 241
 5be:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	

	sendCommand(SSD1306_SETVCOMDETECT);
 5c2:	8b ed       	ldi	r24, 0xDB	; 219
 5c4:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	sendCommand(0x40);
 5c8:	80 e4       	ldi	r24, 0x40	; 64
 5ca:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	
	sendCommand(SSD1306_DISPLAYON);	//0XAF
 5ce:	8f ea       	ldi	r24, 0xAF	; 175
 5d0:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
 5d4:	08 95       	ret

000005d6 <sendCommand_Plus2B>:
	i2c_write(command);
	i2c_stop();
}

void sendCommand_Plus2B(uint8_t command, uint8_t byte_1, uint8_t byte_2)
{
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	18 2f       	mov	r17, r24
 5de:	d6 2f       	mov	r29, r22
 5e0:	c4 2f       	mov	r28, r20
	i2c_start(SSD1306_DEFAULT_ADDRESS);
 5e2:	88 e7       	ldi	r24, 0x78	; 120
 5e4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <i2c_start>
	i2c_write(command_byte);
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_write(command);
 5ee:	81 2f       	mov	r24, r17
 5f0:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_write(byte_1);
 5f4:	8d 2f       	mov	r24, r29
 5f6:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_write(byte_2);
 5fa:	8c 2f       	mov	r24, r28
 5fc:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_stop();
 600:	0e 94 41 02 	call	0x482	; 0x482 <i2c_stop>
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	08 95       	ret

0000060c <sendData>:
void sendData(uint8_t data)
{
 60c:	cf 93       	push	r28
 60e:	c8 2f       	mov	r28, r24
	i2c_start(SSD1306_DEFAULT_ADDRESS);
 610:	88 e7       	ldi	r24, 0x78	; 120
 612:	0e 94 fd 01 	call	0x3fa	; 0x3fa <i2c_start>
	i2c_write(data_byte);
 616:	80 e4       	ldi	r24, 0x40	; 64
 618:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_write(data);
 61c:	8c 2f       	mov	r24, r28
 61e:	0e 94 24 02 	call	0x448	; 0x448 <i2c_write>
	i2c_stop();
 622:	0e 94 41 02 	call	0x482	; 0x482 <i2c_stop>
	NOP();
 626:	0e 94 6e 03 	call	0x6dc	; 0x6dc <NOP>
}
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <drawBuffer>:
	}
}


void drawBuffer(uint8_t *buffer)
{
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	8c 01       	movw	r16, r24
	sendCommand_Plus2B(SSD1306_COLUMNADDR, 0, 127);//0X21, range from 0-127
 638:	4f e7       	ldi	r20, 0x7F	; 127
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	81 e2       	ldi	r24, 0x21	; 33
 63e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <sendCommand_Plus2B>
	sendCommand_Plus2B(SSD1306_PAGEADDR, 0, 7);//0X22, range from 0-7
 642:	47 e0       	ldi	r20, 0x07	; 7
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	82 e2       	ldi	r24, 0x22	; 34
 648:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <sendCommand_Plus2B>
 64c:	e8 01       	movw	r28, r16
 64e:	1c 5f       	subi	r17, 0xFC	; 252
	
	for (uint16_t i=0; i<1024; i++)
	{
		sendData(buffer[i]);
 650:	89 91       	ld	r24, Y+
 652:	0e 94 06 03 	call	0x60c	; 0x60c <sendData>
void drawBuffer(uint8_t *buffer)
{
	sendCommand_Plus2B(SSD1306_COLUMNADDR, 0, 127);//0X21, range from 0-127
	sendCommand_Plus2B(SSD1306_PAGEADDR, 0, 7);//0X22, range from 0-7
	
	for (uint16_t i=0; i<1024; i++)
 656:	c0 17       	cp	r28, r16
 658:	d1 07       	cpc	r29, r17
 65a:	d1 f7       	brne	.-12     	; 0x650 <drawBuffer+0x22>
	{
		sendData(buffer[i]);
	}
	
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	08 95       	ret

00000666 <TIMER1_enable>:
 */ 
#include "includes.h"

void TIMER1_enable(void)
{
	TCCR1A = 0;     // set entire TCCR1A register to 0
 666:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;     // same for TCCR1B
 66a:	e1 e8       	ldi	r30, 0x81	; 129
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	10 82       	st	Z, r1
	
	// set compare match register to desired timer count
	OCR1A = 15624;// --> 1 SECOND
 670:	88 e0       	ldi	r24, 0x08	; 8
 672:	9d e3       	ldi	r25, 0x3D	; 61
 674:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 678:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//OCR1AH = 0x3D;                      //Load higher byte of 15624 into output compare register
	//OCR1AL = 0x08;                      //Load lower byte of 15624 into output compare register
	
	
	// Turn on CTC modeSet CS10 and CS12 bits for 1024 prescaler
	TCCR1B = (1 << WGM12) | (1 << CS10) | (1 << CS12);
 67c:	8d e0       	ldi	r24, 0x0D	; 13
 67e:	80 83       	st	Z, r24
	
	//Clear ICF1, clear pending interrupts
	TIFR1 = 1<<ICF1;
 680:	80 e2       	ldi	r24, 0x20	; 32
 682:	86 bb       	out	0x16, r24	; 22
	
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
 684:	ef e6       	ldi	r30, 0x6F	; 111
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	80 83       	st	Z, r24
	
	
	TCNT1H=0;
 68e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0;	
 692:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 696:	08 95       	ret

00000698 <USART_Init>:

//The purpose of this function is to initialize the USART.
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(baud>>8);
 698:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)baud;
 69c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter, enables interrupt on the RXC1 Flag */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 6a0:	88 e9       	ldi	r24, 0x98	; 152
 6a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1 stop bit */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);	
 6a6:	86 e0       	ldi	r24, 0x06	; 6
 6a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 6ac:	08 95       	ret

000006ae <USART_Transmit_byte>:
}

void USART_Transmit_byte( const char byte )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 6ae:	e0 ec       	ldi	r30, 0xC0	; 192
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	90 81       	ld	r25, Z
 6b4:	95 ff       	sbrs	r25, 5
 6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <USART_Transmit_byte+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = byte;
 6b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 6bc:	08 95       	ret

000006be <USART_Transmit_data>:
}

void USART_Transmit_data(const char * s)
{
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	ec 01       	movw	r28, r24
	while(*s!=0){
 6c4:	88 81       	ld	r24, Y
 6c6:	88 23       	and	r24, r24
 6c8:	31 f0       	breq	.+12     	; 0x6d6 <USART_Transmit_data+0x18>
 6ca:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_byte(*s);
 6cc:	0e 94 57 03 	call	0x6ae	; 0x6ae <USART_Transmit_byte>
	UDR0 = byte;
}

void USART_Transmit_data(const char * s)
{
	while(*s!=0){
 6d0:	89 91       	ld	r24, Y+
 6d2:	81 11       	cpse	r24, r1
 6d4:	fb cf       	rjmp	.-10     	; 0x6cc <USART_Transmit_data+0xe>
		USART_Transmit_byte(*s);
	*s++;}
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	08 95       	ret

000006dc <NOP>:
#include "includes.h"

char mensaje[20];

	
void NOP (void) {}
 6dc:	08 95       	ret

000006de <test_1>:
	


void test_1 (void)
{
	sendCommand(0XA7);//Invert display
 6de:	87 ea       	ldi	r24, 0xA7	; 167
 6e0:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
	drawBuffer(buffer);//For 1024 With command send_Data(data)
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	0e 94 17 03 	call	0x62e	; 0x62e <drawBuffer>
 6ec:	2f ef       	ldi	r18, 0xFF	; 255
 6ee:	83 ed       	ldi	r24, 0xD3	; 211
 6f0:	90 e3       	ldi	r25, 0x30	; 48
 6f2:	21 50       	subi	r18, 0x01	; 1
 6f4:	80 40       	sbci	r24, 0x00	; 0
 6f6:	90 40       	sbci	r25, 0x00	; 0
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <test_1+0x14>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <test_1+0x1e>
 6fc:	00 00       	nop
	_delay_ms(1000);
	clearBuffer(buffer);
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	0e 94 45 02 	call	0x48a	; 0x48a <clearBuffer>
	sendCommand(SSD1306_NORMALDISPLAY);//Invert display
 706:	86 ea       	ldi	r24, 0xA6	; 166
 708:	0e 94 90 02 	call	0x520	; 0x520 <sendCommand>
 70c:	08 95       	ret

0000070e <test_2>:
}


void test_2 (void)
{
	USART_Transmit_data("Hello my friend \n");	
 70e:	86 ef       	ldi	r24, 0xF6	; 246
 710:	96 e0       	ldi	r25, 0x06	; 6
 712:	0e 94 5f 03 	call	0x6be	; 0x6be <USART_Transmit_data>
 716:	08 95       	ret

00000718 <test_3>:
}

void test_3 (unsigned char n, unsigned char j)
{
	//clearBuffer(buffer);
	lcd_draw_string(n,j, "Running: ", buffer);//Charge buffer with string
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	31 e0       	ldi	r19, 0x01	; 1
 71c:	48 e0       	ldi	r20, 0x08	; 8
 71e:	57 e0       	ldi	r21, 0x07	; 7
 720:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_draw_string>
	drawBuffer(buffer);//For 1024 With command send_Data(data)
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 17 03 	call	0x62e	; 0x62e <drawBuffer>
 72c:	08 95       	ret

0000072e <sprintf>:
 72e:	ae e0       	ldi	r26, 0x0E	; 14
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	ed e9       	ldi	r30, 0x9D	; 157
 734:	f3 e0       	ldi	r31, 0x03	; 3
 736:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__prologue_saves__+0x1c>
 73a:	0d 89       	ldd	r16, Y+21	; 0x15
 73c:	1e 89       	ldd	r17, Y+22	; 0x16
 73e:	86 e0       	ldi	r24, 0x06	; 6
 740:	8c 83       	std	Y+4, r24	; 0x04
 742:	1a 83       	std	Y+2, r17	; 0x02
 744:	09 83       	std	Y+1, r16	; 0x01
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	9f e7       	ldi	r25, 0x7F	; 127
 74a:	9e 83       	std	Y+6, r25	; 0x06
 74c:	8d 83       	std	Y+5, r24	; 0x05
 74e:	ae 01       	movw	r20, r28
 750:	47 5e       	subi	r20, 0xE7	; 231
 752:	5f 4f       	sbci	r21, 0xFF	; 255
 754:	6f 89       	ldd	r22, Y+23	; 0x17
 756:	78 8d       	ldd	r23, Y+24	; 0x18
 758:	ce 01       	movw	r24, r28
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	0e 94 ba 03 	call	0x774	; 0x774 <vfprintf>
 760:	2f 81       	ldd	r18, Y+7	; 0x07
 762:	38 85       	ldd	r19, Y+8	; 0x08
 764:	f8 01       	movw	r30, r16
 766:	e2 0f       	add	r30, r18
 768:	f3 1f       	adc	r31, r19
 76a:	10 82       	st	Z, r1
 76c:	2e 96       	adiw	r28, 0x0e	; 14
 76e:	e4 e0       	ldi	r30, 0x04	; 4
 770:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__epilogue_restores__+0x1c>

00000774 <vfprintf>:
 774:	ac e0       	ldi	r26, 0x0C	; 12
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 ec       	ldi	r30, 0xC0	; 192
 77a:	f3 e0       	ldi	r31, 0x03	; 3
 77c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__prologue_saves__>
 780:	7c 01       	movw	r14, r24
 782:	6b 01       	movw	r12, r22
 784:	8a 01       	movw	r16, r20
 786:	fc 01       	movw	r30, r24
 788:	17 82       	std	Z+7, r1	; 0x07
 78a:	16 82       	std	Z+6, r1	; 0x06
 78c:	83 81       	ldd	r24, Z+3	; 0x03
 78e:	81 ff       	sbrs	r24, 1
 790:	bd c1       	rjmp	.+890    	; 0xb0c <__stack+0x20d>
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	4c 01       	movw	r8, r24
 798:	f7 01       	movw	r30, r14
 79a:	93 81       	ldd	r25, Z+3	; 0x03
 79c:	f6 01       	movw	r30, r12
 79e:	93 fd       	sbrc	r25, 3
 7a0:	85 91       	lpm	r24, Z+
 7a2:	93 ff       	sbrs	r25, 3
 7a4:	81 91       	ld	r24, Z+
 7a6:	6f 01       	movw	r12, r30
 7a8:	88 23       	and	r24, r24
 7aa:	09 f4       	brne	.+2      	; 0x7ae <vfprintf+0x3a>
 7ac:	ab c1       	rjmp	.+854    	; 0xb04 <__stack+0x205>
 7ae:	85 32       	cpi	r24, 0x25	; 37
 7b0:	39 f4       	brne	.+14     	; 0x7c0 <vfprintf+0x4c>
 7b2:	93 fd       	sbrc	r25, 3
 7b4:	85 91       	lpm	r24, Z+
 7b6:	93 ff       	sbrs	r25, 3
 7b8:	81 91       	ld	r24, Z+
 7ba:	6f 01       	movw	r12, r30
 7bc:	85 32       	cpi	r24, 0x25	; 37
 7be:	29 f4       	brne	.+10     	; 0x7ca <vfprintf+0x56>
 7c0:	b7 01       	movw	r22, r14
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 7c8:	e7 cf       	rjmp	.-50     	; 0x798 <vfprintf+0x24>
 7ca:	51 2c       	mov	r5, r1
 7cc:	31 2c       	mov	r3, r1
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	20 32       	cpi	r18, 0x20	; 32
 7d2:	a0 f4       	brcc	.+40     	; 0x7fc <vfprintf+0x88>
 7d4:	8b 32       	cpi	r24, 0x2B	; 43
 7d6:	69 f0       	breq	.+26     	; 0x7f2 <vfprintf+0x7e>
 7d8:	30 f4       	brcc	.+12     	; 0x7e6 <vfprintf+0x72>
 7da:	80 32       	cpi	r24, 0x20	; 32
 7dc:	59 f0       	breq	.+22     	; 0x7f4 <vfprintf+0x80>
 7de:	83 32       	cpi	r24, 0x23	; 35
 7e0:	69 f4       	brne	.+26     	; 0x7fc <vfprintf+0x88>
 7e2:	20 61       	ori	r18, 0x10	; 16
 7e4:	2c c0       	rjmp	.+88     	; 0x83e <vfprintf+0xca>
 7e6:	8d 32       	cpi	r24, 0x2D	; 45
 7e8:	39 f0       	breq	.+14     	; 0x7f8 <vfprintf+0x84>
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	39 f4       	brne	.+14     	; 0x7fc <vfprintf+0x88>
 7ee:	21 60       	ori	r18, 0x01	; 1
 7f0:	26 c0       	rjmp	.+76     	; 0x83e <vfprintf+0xca>
 7f2:	22 60       	ori	r18, 0x02	; 2
 7f4:	24 60       	ori	r18, 0x04	; 4
 7f6:	23 c0       	rjmp	.+70     	; 0x83e <vfprintf+0xca>
 7f8:	28 60       	ori	r18, 0x08	; 8
 7fa:	21 c0       	rjmp	.+66     	; 0x83e <vfprintf+0xca>
 7fc:	27 fd       	sbrc	r18, 7
 7fe:	27 c0       	rjmp	.+78     	; 0x84e <vfprintf+0xda>
 800:	30 ed       	ldi	r19, 0xD0	; 208
 802:	38 0f       	add	r19, r24
 804:	3a 30       	cpi	r19, 0x0A	; 10
 806:	78 f4       	brcc	.+30     	; 0x826 <vfprintf+0xb2>
 808:	26 ff       	sbrs	r18, 6
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0xa4>
 80c:	fa e0       	ldi	r31, 0x0A	; 10
 80e:	5f 9e       	mul	r5, r31
 810:	30 0d       	add	r19, r0
 812:	11 24       	eor	r1, r1
 814:	53 2e       	mov	r5, r19
 816:	13 c0       	rjmp	.+38     	; 0x83e <vfprintf+0xca>
 818:	8a e0       	ldi	r24, 0x0A	; 10
 81a:	38 9e       	mul	r3, r24
 81c:	30 0d       	add	r19, r0
 81e:	11 24       	eor	r1, r1
 820:	33 2e       	mov	r3, r19
 822:	20 62       	ori	r18, 0x20	; 32
 824:	0c c0       	rjmp	.+24     	; 0x83e <vfprintf+0xca>
 826:	8e 32       	cpi	r24, 0x2E	; 46
 828:	21 f4       	brne	.+8      	; 0x832 <vfprintf+0xbe>
 82a:	26 fd       	sbrc	r18, 6
 82c:	6b c1       	rjmp	.+726    	; 0xb04 <__stack+0x205>
 82e:	20 64       	ori	r18, 0x40	; 64
 830:	06 c0       	rjmp	.+12     	; 0x83e <vfprintf+0xca>
 832:	8c 36       	cpi	r24, 0x6C	; 108
 834:	11 f4       	brne	.+4      	; 0x83a <vfprintf+0xc6>
 836:	20 68       	ori	r18, 0x80	; 128
 838:	02 c0       	rjmp	.+4      	; 0x83e <vfprintf+0xca>
 83a:	88 36       	cpi	r24, 0x68	; 104
 83c:	41 f4       	brne	.+16     	; 0x84e <vfprintf+0xda>
 83e:	f6 01       	movw	r30, r12
 840:	93 fd       	sbrc	r25, 3
 842:	85 91       	lpm	r24, Z+
 844:	93 ff       	sbrs	r25, 3
 846:	81 91       	ld	r24, Z+
 848:	6f 01       	movw	r12, r30
 84a:	81 11       	cpse	r24, r1
 84c:	c1 cf       	rjmp	.-126    	; 0x7d0 <vfprintf+0x5c>
 84e:	98 2f       	mov	r25, r24
 850:	9f 7d       	andi	r25, 0xDF	; 223
 852:	95 54       	subi	r25, 0x45	; 69
 854:	93 30       	cpi	r25, 0x03	; 3
 856:	28 f4       	brcc	.+10     	; 0x862 <vfprintf+0xee>
 858:	0c 5f       	subi	r16, 0xFC	; 252
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	ff e3       	ldi	r31, 0x3F	; 63
 85e:	f9 83       	std	Y+1, r31	; 0x01
 860:	0d c0       	rjmp	.+26     	; 0x87c <vfprintf+0x108>
 862:	83 36       	cpi	r24, 0x63	; 99
 864:	31 f0       	breq	.+12     	; 0x872 <vfprintf+0xfe>
 866:	83 37       	cpi	r24, 0x73	; 115
 868:	71 f0       	breq	.+28     	; 0x886 <vfprintf+0x112>
 86a:	83 35       	cpi	r24, 0x53	; 83
 86c:	09 f0       	breq	.+2      	; 0x870 <vfprintf+0xfc>
 86e:	5b c0       	rjmp	.+182    	; 0x926 <__stack+0x27>
 870:	22 c0       	rjmp	.+68     	; 0x8b6 <vfprintf+0x142>
 872:	f8 01       	movw	r30, r16
 874:	80 81       	ld	r24, Z
 876:	89 83       	std	Y+1, r24	; 0x01
 878:	0e 5f       	subi	r16, 0xFE	; 254
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	44 24       	eor	r4, r4
 87e:	43 94       	inc	r4
 880:	51 2c       	mov	r5, r1
 882:	54 01       	movw	r10, r8
 884:	15 c0       	rjmp	.+42     	; 0x8b0 <vfprintf+0x13c>
 886:	38 01       	movw	r6, r16
 888:	f2 e0       	ldi	r31, 0x02	; 2
 88a:	6f 0e       	add	r6, r31
 88c:	71 1c       	adc	r7, r1
 88e:	f8 01       	movw	r30, r16
 890:	a0 80       	ld	r10, Z
 892:	b1 80       	ldd	r11, Z+1	; 0x01
 894:	26 ff       	sbrs	r18, 6
 896:	03 c0       	rjmp	.+6      	; 0x89e <vfprintf+0x12a>
 898:	65 2d       	mov	r22, r5
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vfprintf+0x12e>
 89e:	6f ef       	ldi	r22, 0xFF	; 255
 8a0:	7f ef       	ldi	r23, 0xFF	; 255
 8a2:	c5 01       	movw	r24, r10
 8a4:	2c 87       	std	Y+12, r18	; 0x0c
 8a6:	0e 94 97 05 	call	0xb2e	; 0xb2e <strnlen>
 8aa:	2c 01       	movw	r4, r24
 8ac:	83 01       	movw	r16, r6
 8ae:	2c 85       	ldd	r18, Y+12	; 0x0c
 8b0:	2f 77       	andi	r18, 0x7F	; 127
 8b2:	22 2e       	mov	r2, r18
 8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <vfprintf+0x170>
 8b6:	38 01       	movw	r6, r16
 8b8:	f2 e0       	ldi	r31, 0x02	; 2
 8ba:	6f 0e       	add	r6, r31
 8bc:	71 1c       	adc	r7, r1
 8be:	f8 01       	movw	r30, r16
 8c0:	a0 80       	ld	r10, Z
 8c2:	b1 80       	ldd	r11, Z+1	; 0x01
 8c4:	26 ff       	sbrs	r18, 6
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <vfprintf+0x15a>
 8c8:	65 2d       	mov	r22, r5
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x15e>
 8ce:	6f ef       	ldi	r22, 0xFF	; 255
 8d0:	7f ef       	ldi	r23, 0xFF	; 255
 8d2:	c5 01       	movw	r24, r10
 8d4:	2c 87       	std	Y+12, r18	; 0x0c
 8d6:	0e 94 8c 05 	call	0xb18	; 0xb18 <strnlen_P>
 8da:	2c 01       	movw	r4, r24
 8dc:	2c 85       	ldd	r18, Y+12	; 0x0c
 8de:	20 68       	ori	r18, 0x80	; 128
 8e0:	22 2e       	mov	r2, r18
 8e2:	83 01       	movw	r16, r6
 8e4:	23 fc       	sbrc	r2, 3
 8e6:	1b c0       	rjmp	.+54     	; 0x91e <__stack+0x1f>
 8e8:	83 2d       	mov	r24, r3
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	48 16       	cp	r4, r24
 8ee:	59 06       	cpc	r5, r25
 8f0:	b0 f4       	brcc	.+44     	; 0x91e <__stack+0x1f>
 8f2:	b7 01       	movw	r22, r14
 8f4:	80 e2       	ldi	r24, 0x20	; 32
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 8fc:	3a 94       	dec	r3
 8fe:	f4 cf       	rjmp	.-24     	; 0x8e8 <vfprintf+0x174>
 900:	f5 01       	movw	r30, r10
 902:	27 fc       	sbrc	r2, 7
 904:	85 91       	lpm	r24, Z+
 906:	27 fe       	sbrs	r2, 7
 908:	81 91       	ld	r24, Z+
 90a:	5f 01       	movw	r10, r30
 90c:	b7 01       	movw	r22, r14
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 914:	31 10       	cpse	r3, r1
 916:	3a 94       	dec	r3
 918:	f1 e0       	ldi	r31, 0x01	; 1
 91a:	4f 1a       	sub	r4, r31
 91c:	51 08       	sbc	r5, r1
 91e:	41 14       	cp	r4, r1
 920:	51 04       	cpc	r5, r1
 922:	71 f7       	brne	.-36     	; 0x900 <__stack+0x1>
 924:	e5 c0       	rjmp	.+458    	; 0xaf0 <__stack+0x1f1>
 926:	84 36       	cpi	r24, 0x64	; 100
 928:	11 f0       	breq	.+4      	; 0x92e <__stack+0x2f>
 92a:	89 36       	cpi	r24, 0x69	; 105
 92c:	39 f5       	brne	.+78     	; 0x97c <__stack+0x7d>
 92e:	f8 01       	movw	r30, r16
 930:	27 ff       	sbrs	r18, 7
 932:	07 c0       	rjmp	.+14     	; 0x942 <__stack+0x43>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	93 81       	ldd	r25, Z+3	; 0x03
 93c:	0c 5f       	subi	r16, 0xFC	; 252
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	08 c0       	rjmp	.+16     	; 0x952 <__stack+0x53>
 942:	60 81       	ld	r22, Z
 944:	71 81       	ldd	r23, Z+1	; 0x01
 946:	07 2e       	mov	r0, r23
 948:	00 0c       	add	r0, r0
 94a:	88 0b       	sbc	r24, r24
 94c:	99 0b       	sbc	r25, r25
 94e:	0e 5f       	subi	r16, 0xFE	; 254
 950:	1f 4f       	sbci	r17, 0xFF	; 255
 952:	2f 76       	andi	r18, 0x6F	; 111
 954:	72 2e       	mov	r7, r18
 956:	97 ff       	sbrs	r25, 7
 958:	09 c0       	rjmp	.+18     	; 0x96c <__stack+0x6d>
 95a:	90 95       	com	r25
 95c:	80 95       	com	r24
 95e:	70 95       	com	r23
 960:	61 95       	neg	r22
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	20 68       	ori	r18, 0x80	; 128
 96a:	72 2e       	mov	r7, r18
 96c:	2a e0       	ldi	r18, 0x0A	; 10
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	a4 01       	movw	r20, r8
 972:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 976:	a8 2e       	mov	r10, r24
 978:	a8 18       	sub	r10, r8
 97a:	44 c0       	rjmp	.+136    	; 0xa04 <__stack+0x105>
 97c:	85 37       	cpi	r24, 0x75	; 117
 97e:	29 f4       	brne	.+10     	; 0x98a <__stack+0x8b>
 980:	2f 7e       	andi	r18, 0xEF	; 239
 982:	b2 2e       	mov	r11, r18
 984:	2a e0       	ldi	r18, 0x0A	; 10
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	25 c0       	rjmp	.+74     	; 0x9d4 <__stack+0xd5>
 98a:	f2 2f       	mov	r31, r18
 98c:	f9 7f       	andi	r31, 0xF9	; 249
 98e:	bf 2e       	mov	r11, r31
 990:	8f 36       	cpi	r24, 0x6F	; 111
 992:	c1 f0       	breq	.+48     	; 0x9c4 <__stack+0xc5>
 994:	18 f4       	brcc	.+6      	; 0x99c <__stack+0x9d>
 996:	88 35       	cpi	r24, 0x58	; 88
 998:	79 f0       	breq	.+30     	; 0x9b8 <__stack+0xb9>
 99a:	b4 c0       	rjmp	.+360    	; 0xb04 <__stack+0x205>
 99c:	80 37       	cpi	r24, 0x70	; 112
 99e:	19 f0       	breq	.+6      	; 0x9a6 <__stack+0xa7>
 9a0:	88 37       	cpi	r24, 0x78	; 120
 9a2:	21 f0       	breq	.+8      	; 0x9ac <__stack+0xad>
 9a4:	af c0       	rjmp	.+350    	; 0xb04 <__stack+0x205>
 9a6:	2f 2f       	mov	r18, r31
 9a8:	20 61       	ori	r18, 0x10	; 16
 9aa:	b2 2e       	mov	r11, r18
 9ac:	b4 fe       	sbrs	r11, 4
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <__stack+0xcb>
 9b0:	8b 2d       	mov	r24, r11
 9b2:	84 60       	ori	r24, 0x04	; 4
 9b4:	b8 2e       	mov	r11, r24
 9b6:	09 c0       	rjmp	.+18     	; 0x9ca <__stack+0xcb>
 9b8:	24 ff       	sbrs	r18, 4
 9ba:	0a c0       	rjmp	.+20     	; 0x9d0 <__stack+0xd1>
 9bc:	9f 2f       	mov	r25, r31
 9be:	96 60       	ori	r25, 0x06	; 6
 9c0:	b9 2e       	mov	r11, r25
 9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <__stack+0xd1>
 9c4:	28 e0       	ldi	r18, 0x08	; 8
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__stack+0xd5>
 9ca:	20 e1       	ldi	r18, 0x10	; 16
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	20 e1       	ldi	r18, 0x10	; 16
 9d2:	32 e0       	ldi	r19, 0x02	; 2
 9d4:	f8 01       	movw	r30, r16
 9d6:	b7 fe       	sbrs	r11, 7
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__stack+0xe9>
 9da:	60 81       	ld	r22, Z
 9dc:	71 81       	ldd	r23, Z+1	; 0x01
 9de:	82 81       	ldd	r24, Z+2	; 0x02
 9e0:	93 81       	ldd	r25, Z+3	; 0x03
 9e2:	0c 5f       	subi	r16, 0xFC	; 252
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <__stack+0xf5>
 9e8:	60 81       	ld	r22, Z
 9ea:	71 81       	ldd	r23, Z+1	; 0x01
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 5f       	subi	r16, 0xFE	; 254
 9f2:	1f 4f       	sbci	r17, 0xFF	; 255
 9f4:	a4 01       	movw	r20, r8
 9f6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 9fa:	a8 2e       	mov	r10, r24
 9fc:	a8 18       	sub	r10, r8
 9fe:	fb 2d       	mov	r31, r11
 a00:	ff 77       	andi	r31, 0x7F	; 127
 a02:	7f 2e       	mov	r7, r31
 a04:	76 fe       	sbrs	r7, 6
 a06:	0b c0       	rjmp	.+22     	; 0xa1e <__stack+0x11f>
 a08:	37 2d       	mov	r19, r7
 a0a:	3e 7f       	andi	r19, 0xFE	; 254
 a0c:	a5 14       	cp	r10, r5
 a0e:	50 f4       	brcc	.+20     	; 0xa24 <__stack+0x125>
 a10:	74 fe       	sbrs	r7, 4
 a12:	0a c0       	rjmp	.+20     	; 0xa28 <__stack+0x129>
 a14:	72 fc       	sbrc	r7, 2
 a16:	08 c0       	rjmp	.+16     	; 0xa28 <__stack+0x129>
 a18:	37 2d       	mov	r19, r7
 a1a:	3e 7e       	andi	r19, 0xEE	; 238
 a1c:	05 c0       	rjmp	.+10     	; 0xa28 <__stack+0x129>
 a1e:	ba 2c       	mov	r11, r10
 a20:	37 2d       	mov	r19, r7
 a22:	03 c0       	rjmp	.+6      	; 0xa2a <__stack+0x12b>
 a24:	ba 2c       	mov	r11, r10
 a26:	01 c0       	rjmp	.+2      	; 0xa2a <__stack+0x12b>
 a28:	b5 2c       	mov	r11, r5
 a2a:	34 ff       	sbrs	r19, 4
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__stack+0x149>
 a2e:	fe 01       	movw	r30, r28
 a30:	ea 0d       	add	r30, r10
 a32:	f1 1d       	adc	r31, r1
 a34:	80 81       	ld	r24, Z
 a36:	80 33       	cpi	r24, 0x30	; 48
 a38:	11 f4       	brne	.+4      	; 0xa3e <__stack+0x13f>
 a3a:	39 7e       	andi	r19, 0xE9	; 233
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <__stack+0x151>
 a3e:	32 ff       	sbrs	r19, 2
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <__stack+0x14f>
 a42:	b3 94       	inc	r11
 a44:	b3 94       	inc	r11
 a46:	04 c0       	rjmp	.+8      	; 0xa50 <__stack+0x151>
 a48:	83 2f       	mov	r24, r19
 a4a:	86 78       	andi	r24, 0x86	; 134
 a4c:	09 f0       	breq	.+2      	; 0xa50 <__stack+0x151>
 a4e:	b3 94       	inc	r11
 a50:	33 fd       	sbrc	r19, 3
 a52:	13 c0       	rjmp	.+38     	; 0xa7a <__stack+0x17b>
 a54:	30 ff       	sbrs	r19, 0
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <__stack+0x165>
 a58:	5a 2c       	mov	r5, r10
 a5a:	b3 14       	cp	r11, r3
 a5c:	18 f4       	brcc	.+6      	; 0xa64 <__stack+0x165>
 a5e:	53 0c       	add	r5, r3
 a60:	5b 18       	sub	r5, r11
 a62:	b3 2c       	mov	r11, r3
 a64:	b3 14       	cp	r11, r3
 a66:	68 f4       	brcc	.+26     	; 0xa82 <__stack+0x183>
 a68:	b7 01       	movw	r22, r14
 a6a:	80 e2       	ldi	r24, 0x20	; 32
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	3c 87       	std	Y+12, r19	; 0x0c
 a70:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 a74:	b3 94       	inc	r11
 a76:	3c 85       	ldd	r19, Y+12	; 0x0c
 a78:	f5 cf       	rjmp	.-22     	; 0xa64 <__stack+0x165>
 a7a:	b3 14       	cp	r11, r3
 a7c:	10 f4       	brcc	.+4      	; 0xa82 <__stack+0x183>
 a7e:	3b 18       	sub	r3, r11
 a80:	01 c0       	rjmp	.+2      	; 0xa84 <__stack+0x185>
 a82:	31 2c       	mov	r3, r1
 a84:	34 ff       	sbrs	r19, 4
 a86:	12 c0       	rjmp	.+36     	; 0xaac <__stack+0x1ad>
 a88:	b7 01       	movw	r22, r14
 a8a:	80 e3       	ldi	r24, 0x30	; 48
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	3c 87       	std	Y+12, r19	; 0x0c
 a90:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 a94:	3c 85       	ldd	r19, Y+12	; 0x0c
 a96:	32 ff       	sbrs	r19, 2
 a98:	17 c0       	rjmp	.+46     	; 0xac8 <__stack+0x1c9>
 a9a:	31 fd       	sbrc	r19, 1
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <__stack+0x1a5>
 a9e:	88 e7       	ldi	r24, 0x78	; 120
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <__stack+0x1a9>
 aa4:	88 e5       	ldi	r24, 0x58	; 88
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	b7 01       	movw	r22, r14
 aaa:	0c c0       	rjmp	.+24     	; 0xac4 <__stack+0x1c5>
 aac:	83 2f       	mov	r24, r19
 aae:	86 78       	andi	r24, 0x86	; 134
 ab0:	59 f0       	breq	.+22     	; 0xac8 <__stack+0x1c9>
 ab2:	31 ff       	sbrs	r19, 1
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <__stack+0x1bb>
 ab6:	8b e2       	ldi	r24, 0x2B	; 43
 ab8:	01 c0       	rjmp	.+2      	; 0xabc <__stack+0x1bd>
 aba:	80 e2       	ldi	r24, 0x20	; 32
 abc:	37 fd       	sbrc	r19, 7
 abe:	8d e2       	ldi	r24, 0x2D	; 45
 ac0:	b7 01       	movw	r22, r14
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 ac8:	a5 14       	cp	r10, r5
 aca:	38 f4       	brcc	.+14     	; 0xada <__stack+0x1db>
 acc:	b7 01       	movw	r22, r14
 ace:	80 e3       	ldi	r24, 0x30	; 48
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 ad6:	5a 94       	dec	r5
 ad8:	f7 cf       	rjmp	.-18     	; 0xac8 <__stack+0x1c9>
 ada:	aa 94       	dec	r10
 adc:	f4 01       	movw	r30, r8
 ade:	ea 0d       	add	r30, r10
 ae0:	f1 1d       	adc	r31, r1
 ae2:	80 81       	ld	r24, Z
 ae4:	b7 01       	movw	r22, r14
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 aec:	a1 10       	cpse	r10, r1
 aee:	f5 cf       	rjmp	.-22     	; 0xada <__stack+0x1db>
 af0:	33 20       	and	r3, r3
 af2:	09 f4       	brne	.+2      	; 0xaf6 <__stack+0x1f7>
 af4:	51 ce       	rjmp	.-862    	; 0x798 <vfprintf+0x24>
 af6:	b7 01       	movw	r22, r14
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 a2 05 	call	0xb44	; 0xb44 <fputc>
 b00:	3a 94       	dec	r3
 b02:	f6 cf       	rjmp	.-20     	; 0xaf0 <__stack+0x1f1>
 b04:	f7 01       	movw	r30, r14
 b06:	86 81       	ldd	r24, Z+6	; 0x06
 b08:	97 81       	ldd	r25, Z+7	; 0x07
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <__stack+0x211>
 b0c:	8f ef       	ldi	r24, 0xFF	; 255
 b0e:	9f ef       	ldi	r25, 0xFF	; 255
 b10:	2c 96       	adiw	r28, 0x0c	; 12
 b12:	e2 e1       	ldi	r30, 0x12	; 18
 b14:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__epilogue_restores__>

00000b18 <strnlen_P>:
 b18:	fc 01       	movw	r30, r24
 b1a:	05 90       	lpm	r0, Z+
 b1c:	61 50       	subi	r22, 0x01	; 1
 b1e:	70 40       	sbci	r23, 0x00	; 0
 b20:	01 10       	cpse	r0, r1
 b22:	d8 f7       	brcc	.-10     	; 0xb1a <strnlen_P+0x2>
 b24:	80 95       	com	r24
 b26:	90 95       	com	r25
 b28:	8e 0f       	add	r24, r30
 b2a:	9f 1f       	adc	r25, r31
 b2c:	08 95       	ret

00000b2e <strnlen>:
 b2e:	fc 01       	movw	r30, r24
 b30:	61 50       	subi	r22, 0x01	; 1
 b32:	70 40       	sbci	r23, 0x00	; 0
 b34:	01 90       	ld	r0, Z+
 b36:	01 10       	cpse	r0, r1
 b38:	d8 f7       	brcc	.-10     	; 0xb30 <strnlen+0x2>
 b3a:	80 95       	com	r24
 b3c:	90 95       	com	r25
 b3e:	8e 0f       	add	r24, r30
 b40:	9f 1f       	adc	r25, r31
 b42:	08 95       	ret

00000b44 <fputc>:
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	fb 01       	movw	r30, r22
 b4e:	23 81       	ldd	r18, Z+3	; 0x03
 b50:	21 fd       	sbrc	r18, 1
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <fputc+0x16>
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	9f ef       	ldi	r25, 0xFF	; 255
 b58:	28 c0       	rjmp	.+80     	; 0xbaa <fputc+0x66>
 b5a:	22 ff       	sbrs	r18, 2
 b5c:	16 c0       	rjmp	.+44     	; 0xb8a <fputc+0x46>
 b5e:	46 81       	ldd	r20, Z+6	; 0x06
 b60:	57 81       	ldd	r21, Z+7	; 0x07
 b62:	24 81       	ldd	r18, Z+4	; 0x04
 b64:	35 81       	ldd	r19, Z+5	; 0x05
 b66:	42 17       	cp	r20, r18
 b68:	53 07       	cpc	r21, r19
 b6a:	44 f4       	brge	.+16     	; 0xb7c <fputc+0x38>
 b6c:	a0 81       	ld	r26, Z
 b6e:	b1 81       	ldd	r27, Z+1	; 0x01
 b70:	9d 01       	movw	r18, r26
 b72:	2f 5f       	subi	r18, 0xFF	; 255
 b74:	3f 4f       	sbci	r19, 0xFF	; 255
 b76:	31 83       	std	Z+1, r19	; 0x01
 b78:	20 83       	st	Z, r18
 b7a:	8c 93       	st	X, r24
 b7c:	26 81       	ldd	r18, Z+6	; 0x06
 b7e:	37 81       	ldd	r19, Z+7	; 0x07
 b80:	2f 5f       	subi	r18, 0xFF	; 255
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	37 83       	std	Z+7, r19	; 0x07
 b86:	26 83       	std	Z+6, r18	; 0x06
 b88:	10 c0       	rjmp	.+32     	; 0xbaa <fputc+0x66>
 b8a:	eb 01       	movw	r28, r22
 b8c:	09 2f       	mov	r16, r25
 b8e:	18 2f       	mov	r17, r24
 b90:	00 84       	ldd	r0, Z+8	; 0x08
 b92:	f1 85       	ldd	r31, Z+9	; 0x09
 b94:	e0 2d       	mov	r30, r0
 b96:	09 95       	icall
 b98:	89 2b       	or	r24, r25
 b9a:	e1 f6       	brne	.-72     	; 0xb54 <fputc+0x10>
 b9c:	8e 81       	ldd	r24, Y+6	; 0x06
 b9e:	9f 81       	ldd	r25, Y+7	; 0x07
 ba0:	01 96       	adiw	r24, 0x01	; 1
 ba2:	9f 83       	std	Y+7, r25	; 0x07
 ba4:	8e 83       	std	Y+6, r24	; 0x06
 ba6:	81 2f       	mov	r24, r17
 ba8:	90 2f       	mov	r25, r16
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	0f 91       	pop	r16
 bb2:	08 95       	ret

00000bb4 <__ultoa_invert>:
 bb4:	fa 01       	movw	r30, r20
 bb6:	aa 27       	eor	r26, r26
 bb8:	28 30       	cpi	r18, 0x08	; 8
 bba:	51 f1       	breq	.+84     	; 0xc10 <__ultoa_invert+0x5c>
 bbc:	20 31       	cpi	r18, 0x10	; 16
 bbe:	81 f1       	breq	.+96     	; 0xc20 <__ultoa_invert+0x6c>
 bc0:	e8 94       	clt
 bc2:	6f 93       	push	r22
 bc4:	6e 7f       	andi	r22, 0xFE	; 254
 bc6:	6e 5f       	subi	r22, 0xFE	; 254
 bc8:	7f 4f       	sbci	r23, 0xFF	; 255
 bca:	8f 4f       	sbci	r24, 0xFF	; 255
 bcc:	9f 4f       	sbci	r25, 0xFF	; 255
 bce:	af 4f       	sbci	r26, 0xFF	; 255
 bd0:	b1 e0       	ldi	r27, 0x01	; 1
 bd2:	3e d0       	rcall	.+124    	; 0xc50 <__ultoa_invert+0x9c>
 bd4:	b4 e0       	ldi	r27, 0x04	; 4
 bd6:	3c d0       	rcall	.+120    	; 0xc50 <__ultoa_invert+0x9c>
 bd8:	67 0f       	add	r22, r23
 bda:	78 1f       	adc	r23, r24
 bdc:	89 1f       	adc	r24, r25
 bde:	9a 1f       	adc	r25, r26
 be0:	a1 1d       	adc	r26, r1
 be2:	68 0f       	add	r22, r24
 be4:	79 1f       	adc	r23, r25
 be6:	8a 1f       	adc	r24, r26
 be8:	91 1d       	adc	r25, r1
 bea:	a1 1d       	adc	r26, r1
 bec:	6a 0f       	add	r22, r26
 bee:	71 1d       	adc	r23, r1
 bf0:	81 1d       	adc	r24, r1
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	20 d0       	rcall	.+64     	; 0xc38 <__ultoa_invert+0x84>
 bf8:	09 f4       	brne	.+2      	; 0xbfc <__ultoa_invert+0x48>
 bfa:	68 94       	set
 bfc:	3f 91       	pop	r19
 bfe:	2a e0       	ldi	r18, 0x0A	; 10
 c00:	26 9f       	mul	r18, r22
 c02:	11 24       	eor	r1, r1
 c04:	30 19       	sub	r19, r0
 c06:	30 5d       	subi	r19, 0xD0	; 208
 c08:	31 93       	st	Z+, r19
 c0a:	de f6       	brtc	.-74     	; 0xbc2 <__ultoa_invert+0xe>
 c0c:	cf 01       	movw	r24, r30
 c0e:	08 95       	ret
 c10:	46 2f       	mov	r20, r22
 c12:	47 70       	andi	r20, 0x07	; 7
 c14:	40 5d       	subi	r20, 0xD0	; 208
 c16:	41 93       	st	Z+, r20
 c18:	b3 e0       	ldi	r27, 0x03	; 3
 c1a:	0f d0       	rcall	.+30     	; 0xc3a <__ultoa_invert+0x86>
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__ultoa_invert+0x5c>
 c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <__ultoa_invert+0x58>
 c20:	46 2f       	mov	r20, r22
 c22:	4f 70       	andi	r20, 0x0F	; 15
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	4a 33       	cpi	r20, 0x3A	; 58
 c28:	18 f0       	brcs	.+6      	; 0xc30 <__ultoa_invert+0x7c>
 c2a:	49 5d       	subi	r20, 0xD9	; 217
 c2c:	31 fd       	sbrc	r19, 1
 c2e:	40 52       	subi	r20, 0x20	; 32
 c30:	41 93       	st	Z+, r20
 c32:	02 d0       	rcall	.+4      	; 0xc38 <__ultoa_invert+0x84>
 c34:	a9 f7       	brne	.-22     	; 0xc20 <__ultoa_invert+0x6c>
 c36:	ea cf       	rjmp	.-44     	; 0xc0c <__ultoa_invert+0x58>
 c38:	b4 e0       	ldi	r27, 0x04	; 4
 c3a:	a6 95       	lsr	r26
 c3c:	97 95       	ror	r25
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0x86>
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	61 05       	cpc	r22, r1
 c4c:	71 05       	cpc	r23, r1
 c4e:	08 95       	ret
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	0a 2e       	mov	r0, r26
 c56:	06 94       	lsr	r0
 c58:	57 95       	ror	r21
 c5a:	47 95       	ror	r20
 c5c:	37 95       	ror	r19
 c5e:	27 95       	ror	r18
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0xa2>
 c64:	62 0f       	add	r22, r18
 c66:	73 1f       	adc	r23, r19
 c68:	84 1f       	adc	r24, r20
 c6a:	95 1f       	adc	r25, r21
 c6c:	a0 1d       	adc	r26, r0
 c6e:	08 95       	ret

00000c70 <__prologue_saves__>:
 c70:	2f 92       	push	r2
 c72:	3f 92       	push	r3
 c74:	4f 92       	push	r4
 c76:	5f 92       	push	r5
 c78:	6f 92       	push	r6
 c7a:	7f 92       	push	r7
 c7c:	8f 92       	push	r8
 c7e:	9f 92       	push	r9
 c80:	af 92       	push	r10
 c82:	bf 92       	push	r11
 c84:	cf 92       	push	r12
 c86:	df 92       	push	r13
 c88:	ef 92       	push	r14
 c8a:	ff 92       	push	r15
 c8c:	0f 93       	push	r16
 c8e:	1f 93       	push	r17
 c90:	cf 93       	push	r28
 c92:	df 93       	push	r29
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
 c98:	ca 1b       	sub	r28, r26
 c9a:	db 0b       	sbc	r29, r27
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	de bf       	out	0x3e, r29	; 62
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	09 94       	ijmp

00000ca8 <__epilogue_restores__>:
 ca8:	2a 88       	ldd	r2, Y+18	; 0x12
 caa:	39 88       	ldd	r3, Y+17	; 0x11
 cac:	48 88       	ldd	r4, Y+16	; 0x10
 cae:	5f 84       	ldd	r5, Y+15	; 0x0f
 cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cba:	b9 84       	ldd	r11, Y+9	; 0x09
 cbc:	c8 84       	ldd	r12, Y+8	; 0x08
 cbe:	df 80       	ldd	r13, Y+7	; 0x07
 cc0:	ee 80       	ldd	r14, Y+6	; 0x06
 cc2:	fd 80       	ldd	r15, Y+5	; 0x05
 cc4:	0c 81       	ldd	r16, Y+4	; 0x04
 cc6:	1b 81       	ldd	r17, Y+3	; 0x03
 cc8:	aa 81       	ldd	r26, Y+2	; 0x02
 cca:	b9 81       	ldd	r27, Y+1	; 0x01
 ccc:	ce 0f       	add	r28, r30
 cce:	d1 1d       	adc	r29, r1
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	ed 01       	movw	r28, r26
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
